// Generated by uRequire v0.7.0-beta.23 target: 'lib' template: 'nodejs'

var _ = require('lodash'),
    _B = require('uberscore'),
    UError = require('../utils/UError');

var l = new _B.Logger('uRequire/fileResources/TextResource');

var FileResource, ResourceConverter, TextResource, When, extend = function (child, parent) {
    for (var key in parent) {
      if (hasProp.call(parent, key))
        child[key] = parent[key];
    }
    function ctor() {
      this.constructor = child;
    }
    ctor.prototype = parent.prototype;
    child.prototype = new ctor();
    child.__super__ = parent.prototype;
    return child;
  }, hasProp = {}.hasOwnProperty, indexOf = [].indexOf || function (item) {
    for (var i = 0, l = this.length; i < l; i++) {
      if (i in this && this[i] === item)
        return i;
    }
    return -1;
  };
When = require("when");
FileResource = require("./FileResource");
ResourceConverter = require("../config/ResourceConverter");
TextResource = function (superClass) {
  extend(TextResource, superClass);
  function TextResource() {
    return TextResource.__super__.constructor.apply(this, arguments);
  }
  TextResource.prototype.refresh = function () {
    return TextResource.__super__.refresh.apply(this, arguments).then(function (_this) {
      return function (superRefreshed) {
        var source;
        if (!superRefreshed) {
          return false;
        } else {
          source = _this.read();
          if (source && _this.source !== source) {
            _this.source = source;
            _this.converted = _this.source;
            _this.dstFilename = _this.srcFilename;
            return _this.runResourceConverters(function (rc) {
              var ref;
              return ref = rc.runAt, indexOf.call(_.flatten([
                ResourceConverter.runAt_modOnly,
                "afterSave"
              ]), ref) < 0;
            });
          } else {
            if (l.deb(90)) {
              l.debug("No changes in `source` of TextResource/" + _this.constructor.name + " '" + _this.srcFilename + "' ");
            }
            return _this.hasChanged = false;
          }
        }
      };
    }(this));
  };
  TextResource.prototype.reset = function () {
    TextResource.__super__.reset.apply(this, arguments);
    return delete this.source;
  };
  return TextResource;
}(FileResource);
module.exports = TextResource;
_.extend(module.exports.prototype, {
  l: l,
  _: _,
  _B: _B
});

;