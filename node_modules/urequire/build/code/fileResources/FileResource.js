// Generated by uRequire v0.7.0-beta.23 target: 'lib' template: 'nodejs'

var _ = require('lodash'),
    _B = require('uberscore'),
    UError = require('../utils/UError');

var l = new _B.Logger('uRequire/fileResources/FileResource');

var BundleFile, FileResource, ResourceConverter, ResourceConverterError, When, fs, mkdirp, upath, extend = function (child, parent) {
    for (var key in parent) {
      if (hasProp.call(parent, key))
        child[key] = parent[key];
    }
    function ctor() {
      this.constructor = child;
    }
    ctor.prototype = parent.prototype;
    child.prototype = new ctor();
    child.__super__ = parent.prototype;
    return child;
  }, hasProp = {}.hasOwnProperty, indexOf = [].indexOf || function (item) {
    for (var i = 0, l = this.length; i < l; i++) {
      if (i in this && this[i] === item)
        return i;
    }
    return -1;
  };
fs = require("fs");
mkdirp = require("mkdirp");
When = require("when");
BundleFile = require("./BundleFile");
upath = require("upath");
ResourceConverter = require("../config/ResourceConverter");
ResourceConverterError = require("../utils/ResourceConverterError");
FileResource = function (superClass) {
  var readOptions, saveOptions;
  extend(FileResource, superClass);
  function FileResource() {
    return FileResource.__super__.constructor.apply(this, arguments);
  }
  FileResource.prototype.refresh = function () {
    return FileResource.__super__.refresh.apply(this, arguments).then(function (_this) {
      return function (superRefreshed) {
        if (!superRefreshed) {
          return false;
        } else {
          if (_this.constructor === FileResource) {
            return _this.runResourceConverters(function (rc) {
              var ref;
              return ref = rc.runAt, indexOf.call(_.flatten([
                ResourceConverter.runAt_modOnly,
                "afterSave"
              ]), ref) < 0;
            });
          } else {
            return true;
          }
        }
      };
    }(this));
  };
  FileResource.prototype.reset = function () {
    FileResource.__super__.reset.apply(this, arguments);
    return delete this.converted;
  };
  Object.defineProperties(FileResource.prototype, {
    srcMainFilepath: {
      get: function () {
        var ref;
        if (this.srcMain) {
          return upath.join(((ref = this.bundle) != null ? ref.path : void 0) || "", this.srcMain);
        }
      }
    },
    srcMainRealpath: {
      get: function () {
        if (this.srcMain) {
          return process.cwd() + "/" + this.srcMainFilepath;
        }
      }
    }
  });
  FileResource.prototype.runResourceConverters = function (convFilter) {
    var converters, ref, resConv;
    if (convFilter == null) {
      convFilter = function () {
        return true;
      };
    }
    this.hasErrors = false;
    converters = function () {
      var i, len, ref, results;
      ref = this.converters;
      results = [];
      for (i = 0, len = ref.length; i < len; i++) {
        resConv = ref[i];
        if (!(convFilter(resConv) && resConv.enabled)) {
          continue;
        }
        if (resConv.isTerminal) {
          break;
        }
        results.push(resConv);
      }
      return results;
    }.call(this);
    if (converters.length && l.deb(30)) {
      l.deb("`" + ((ref = this.constructor) != null ? ref.name : void 0) + "` '" + this.srcFilename + "' passing through " + converters.length + " ResourceConverter(s).");
    }
    return When.each(converters, function (_this) {
      return function (resConv) {
        var atStep, ref1;
        if (l.deb(40)) {
          l.deb("ResourceConverter '" + resConv.name + "' for `" + ((ref1 = _this.constructor) != null ? ref1.name : void 0) + "` '" + _this.srcFilename + "' ");
        }
        atStep = null;
        return When.sequence([
          function () {
            var callbackPromise, deferred, fnPromise;
            if (_.isFunction(resConv.convert)) {
              _this.hasChanged = true;
              if (l.deb(90)) {
                l.deb("`resourceConverter.convert()` for '" + resConv.name + "'");
              }
              atStep = "convert";
              return When(resConv.convert.length === 2 ? (callbackPromise = (deferred = When.defer()).promise, fnPromise = resConv.convert(_this, When.node.createCallback(deferred.resolver)), When.race(_.filter([
                callbackPromise,
                fnPromise
              ], function (it) {
                return When.isPromiseLike(it);
              }))) : resConv.convert(_this)).then(function (converted) {
                _this.converted = converted;
              });
            }
          },
          function () {
            var oldDstFn;
            if (_.isFunction(resConv.convFilename)) {
              if (l.deb(60)) {
                l.deb("`resourceConverter.convFilename()` for '" + resConv.name + "'...");
              }
              atStep = "convFilename";
              oldDstFn = _this.dstFilename;
              _this.dstFilename = resConv.convFilename(_this.dstFilename, _this.srcFilename, _this);
              if (l.deb(60)) {
                if (_this.dstFilename !== oldDstFn) {
                  return l.deb("...@dstFilename changed from '" + oldDstFn + "' to '" + _this.dstFilename + "'");
                } else {
                  return l.deb(80, "@dstFilename remained '" + oldDstFn + "'");
                }
              }
            }
          }
        ])["catch"](function (err) {
          var ref2;
          throw _this.hasErrors = new ResourceConverterError("Error converting " + ((ref2 = _this.constructor) != null ? ref2.name : void 0) + " '" + _this.srcFilename + "' with ResourceConverter '" + (resConv != null ? resConv.name : void 0) + "' @ step " + atStep + ".", { nested: err });
        });
      };
    }(this))["yield"](this.hasChanged);
  };
  readOptions = "utf-8";
  FileResource.prototype.read = function (filename, options) {
    var err, error, ref;
    if (filename == null) {
      filename = this.srcFilename;
    }
    if (options == null) {
      options = readOptions;
    }
    if (options !== readOptions) {
      _.defaults(options, readOptions);
    }
    filename = upath.join(((ref = this.bundle) != null ? ref.path : void 0) || "", filename);
    try {
      return fs.readFileSync(filename, options);
    } catch (error) {
      err = error;
      this.hasErrors = true;
      this.bundle.handleError(new UError("Error reading file '" + filename + "'", { nested: err }));
      return void 0;
    }
  };
  FileResource.prototype.save = function (filename, content, options) {
    if (filename == null) {
      filename = this.dstFilename;
    }
    if (content == null) {
      content = this.converted;
    }
    this.constructor.save.call(this, upath.join(this.dstPath, filename), content, options);
    if (indexOf.call(this.dstFilenamesSaved || (this.dstFilenamesSaved = []), filename) < 0) {
      return this.dstFilenamesSaved.push(filename);
    }
  };
  saveOptions = {
    encoding: "utf-8",
    mode: 438,
    flag: "w"
  };
  FileResource.save = function (filename, content, options) {
    var err, error, fileDirname, uerr;
    if (options == null) {
      options = saveOptions;
    }
    if (options !== saveOptions) {
      _.defaults(options, saveOptions);
    }
    if (l.deb(95)) {
      l.debug("Saving file '" + filename + "'...");
    }
    if (!filename) {
      this.bundle.handleError(new UError("Error saving - no filename"));
    }
    if (!content) {
      this.bundle.handleError(new UError("Error saving - no content"));
    }
    try {
      if (!fs.existsSync(fileDirname = upath.dirname(filename))) {
        l.verbose("save: Creating directory '" + fileDirname + "'");
        mkdirp.sync(fileDirname);
      }
      fs.writeFileSync(filename, content, options);
      l.verbose("Saved file '" + filename + "'");
      return true;
    } catch (error) {
      err = error;
      l.er(uerr = "Can't save '" + filename + "'", err);
      return this.bundle.handleError(new UError(uerr, { nested: err }));
    }
  };
  return FileResource;
}(BundleFile);
module.exports = FileResource;
_.extend(module.exports.prototype, {
  l: l,
  _: _,
  _B: _B
});

;