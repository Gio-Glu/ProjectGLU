// Generated by uRequire v0.7.0-beta.23 target: 'lib' template: 'nodejs'

var _ = require('lodash'),
    _B = require('uberscore'),
    UError = require('../utils/UError');

var l = new _B.Logger('uRequire/fileResources/Module');

var Dependency, Module, ModuleGeneratorTemplates, TextResource, When, fs, isEqualCode, isLikeCode, isTrueOrFileMatch, replaceCode, toAST, toCode, upath, util, bind = function (fn, me) {
    return function () {
      return fn.apply(me, arguments);
    };
  }, extend = function (child, parent) {
    for (var key in parent) {
      if (hasProp.call(parent, key))
        child[key] = parent[key];
    }
    function ctor() {
      this.constructor = child;
    }
    ctor.prototype = parent.prototype;
    child.prototype = new ctor();
    child.__super__ = parent.prototype;
    return child;
  }, hasProp = {}.hasOwnProperty, indexOf = [].indexOf || function (item) {
    for (var i = 0, l = this.length; i < l; i++) {
      if (i in this && this[i] === item)
        return i;
    }
    return -1;
  };
_.mixin(require("underscore.string").exports());
fs = require("fs");
util = require("util");
When = require("when");
upath = require("upath");
ModuleGeneratorTemplates = require("../templates/ModuleGeneratorTemplates");
TextResource = require("./TextResource");
Dependency = require("./Dependency");
isTrueOrFileMatch = require("../config/isTrueOrFileMatch");
isLikeCode = require("../codeUtils/isLikeCode");
isEqualCode = require("../codeUtils/isEqualCode");
replaceCode = require("../codeUtils/replaceCode");
toAST = require("../codeUtils/toAST");
toCode = require("../codeUtils/toCode");
Module = function (superClass) {
  var bof, fn, j, len, ref;
  extend(Module, superClass);
  function Module() {
    this.requireFinder = bind(this.requireFinder, this);
    return Module.__super__.constructor.apply(this, arguments);
  }
  Object.defineProperties(Module.prototype, {
    dstPath: {
      get: function () {
        var ref, ref1;
        if ((ref = this.bundle) != null ? ref.build.template._combinedTemp : void 0) {
          return this.bundle.build.template._combinedTemp;
        } else {
          if ((ref1 = this.bundle) != null ? ref1.build.dstPath : void 0) {
            return this.bundle.build.dstPath;
          } else {
            return "";
          }
        }
      }
    }
  });
  ref = [
    "useStrict",
    "bare",
    "globalWindow",
    "runtimeInfo",
    "rootExports_ignore",
    "rootExports_noConflict",
    "allNodeRequires",
    "dummyParams",
    "scanAllow",
    "injectExportsModule",
    "noLoaderUMD",
    "warnNoLoaderUMD"
  ];
  fn = function (bof) {
    return Object.defineProperty(Module.prototype, "is" + _.capitalize(bof), {
      get: function () {
        var ref1, value;
        value = _B.getp((ref1 = this.bundle) != null ? ref1.build : void 0, bof, { separator: "_" });
        return isTrueOrFileMatch(value, this.path);
      }
    });
  };
  for (j = 0, len = ref.length; j < len; j++) {
    bof = ref[j];
    fn(bof);
  }
  Module.prototype.refresh = function () {
    return Module.__super__.refresh.apply(this, arguments).then(function (_this) {
      return function (superRefreshed) {
        var ref1, ref2;
        if (!superRefreshed) {
          return _this.hasChanged = false;
        } else {
          if (_this.sourceCodeJs === _this.converted) {
            l.verbose("No changes in **compiled sourceCodeJs** of module '" + _this.srcFilename + "' ");
            return _this.hasChanged = false;
          } else {
            _this.sourceCodeJs = _this.converted;
            _this.parse();
            if (_.isEqual(_this.AST_top, _this.AST_top_previous)) {
              l.verbose("No changes in **parsed AST sourceCodeJs** of module '" + _this.srcFilename + "' ");
              return _this.hasChanged = false;
            } else {
              if (((ref1 = _this.bundle) != null ? (ref2 = ref1.build) != null ? ref2.watch.enabled : void 0 : void 0) === true) {
                _this.AST_top_previous = _.clone(_this.AST_top, true);
              }
              delete _this.beforeBody;
              delete _this.afterBody;
              delete _this.mergedCode;
              _this.extract();
              _this.prepare();
              return _this.hasChanged = true;
            }
          }
        }
      };
    }(this));
  };
  Module.prototype.reset = function () {
    Module.__super__.reset.apply(this, arguments);
    delete this.sourceCodeJs;
    delete this.AST_top_previous;
    delete this.beforeBody;
    delete this.afterBody;
    delete this.mergedCode;
    return this.resetModuleInfo();
  };
  Module.prototype.resetModuleInfo = function () {
    var dv, k, len1, ref1;
    this.flags = {};
    ref1 = this.keys_extractedDepsAndVarsArrays;
    for (k = 0, len1 = ref1.length; k < len1; k++) {
      dv = ref1[k];
      this[dv] = [];
    }
    delete this.defineArrayDeps;
    return delete this.parameters;
  };
  Module.prototype.AST_data = [
    "AST_top",
    "AST_body",
    "AST_factoryBody",
    "AST_preDefineIIFENodes"
  ];
  Module.prototype.keys_extractedDepsAndVarsArrays = [
    "ext_defineArrayDeps",
    "ext_defineFactoryParams",
    "ext_requireDeps",
    "ext_requireVars",
    "ext_asyncRequireDeps",
    "ext_asyncFactoryParams"
  ];
  Module.prototype.keys_resolvedDependencies = [
    "defineArrayDeps",
    "nodeDeps"
  ];
  Module.prototype.info = function () {
    var info, k, len1, p, ref1;
    info = {};
    ref1 = _.flatten([
      this.keys_extractedDepsAndVarsArrays,
      this.keys_resolvedDependencies,
      [
        "flags",
        "name",
        "kind",
        "path",
        "factoryBody",
        "preDefineIIFEBody",
        "parameters"
      ]
    ]);
    for (k = 0, len1 = ref1.length; k < len1; k++) {
      p = ref1[k];
      if (!_.isEmpty(this[p])) {
        if (_.isArray(this[p])) {
          info[p] = _.map(this[p], function (_this) {
            return function (x) {
              if (indexOf.call(_this.keys_resolvedDependencies, p) >= 0) {
                return x.name();
              } else {
                return x.toString();
              }
            };
          }(this));
        } else {
          info[p] = this[p];
        }
      }
    }
    return info;
  };
  Module.prototype.readArrayDepsAndVars = function (arrayAst, arrayDeps, paramsAst, factoryParams) {
    var arrayDep, astArrayDep, excParamIdx, idx, k, len1, m, param, ref1, ref2, ref3, ref4, ref5;
    ref1 = arrayAst.elements;
    for (idx = k = 0, len1 = ref1.length; k < len1; idx = ++k) {
      astArrayDep = ref1[idx];
      param = (ref2 = paramsAst[idx]) != null ? ref2.name : void 0;
      if (_B.isLike({ type: "Literal" }, astArrayDep)) {
        arrayDep = new Dependency(astArrayDep.value, this, { AST_requireLiterals: [astArrayDep] });
      } else {
        arrayDep = new Dependency(this.toCode(astArrayDep), this, {
          untrusted: true,
          AST_requireUntrustedDep: [astArrayDep]
        });
      }
      if (arrayDep) {
        arrayDeps.push(arrayDep);
      }
      if (param) {
        factoryParams.push(param);
      }
    }
    for (excParamIdx = m = ref3 = arrayAst.elements.length, ref4 = paramsAst.length - 1; m <= ref4; excParamIdx = m += 1) {
      factoryParams.push((ref5 = paramsAst[excParamIdx]) != null ? ref5.name : void 0);
    }
    return this;
  };
  Module.prototype.requireFinder = function (prop, src, dst, blender) {
    var args, requireDep, requireVar;
    if (_B.isLike({
        type: "CallExpression",
        callee: {
          type: "Identifier",
          name: "require"
        }
      }, src[prop])) {
      if (_B.isLike({ "arguments": [{ type: "Literal" }] }, src[prop])) {
        requireDep = new Dependency(src[prop]["arguments"][0].value, this, { AST_requireLiterals: [src[prop]["arguments"][0]] });
      } else {
        if (_B.isLike([
            { type: "ArrayExpression" },
            { type: "FunctionExpression" }
          ], src[prop]["arguments"])) {
          args = src[prop]["arguments"];
          this.readArrayDepsAndVars(args[0], this.ext_asyncRequireDeps || (this.ext_asyncRequireDeps = []), args[1].params, this.ext_asyncFactoryParams || (this.ext_asyncFactoryParams = []));
        } else {
          requireDep = new Dependency(this.toCode(src[prop]["arguments"][0]), this, { untrusted: true });
        }
      }
      if (_B.isLike({
          type: "AssignmentExpression",
          left: { type: "Identifier" }
        }, src) || _B.isLike({
          type: "VariableDeclarator",
          id: { type: "Identifier" }
        }, src)) {
        requireVar = _B.isLike({ type: "AssignmentExpression" }, src) ? src.left.name : src.id.name;
        if (src[prop]["arguments"].length > 1) {
          l.warn("Wrong require() signature in " + this.toCode(src[prop]) + "\nUse the proper AMD `require([dep1, dep2], function(dep1, dep2){...})` for the asnychronous AMD require.");
        }
      }
      if (requireDep) {
        if (requireVar) {
          (this.ext_requireVars || (this.ext_requireVars = [])).push(requireVar);
          (this.ext_requireDeps || (this.ext_requireDeps = [])).splice(this.ext_requireVars.length - 1, 0, requireDep);
        } else {
          (this.ext_requireDeps || (this.ext_requireDeps = [])).push(requireDep);
        }
      }
    }
    return null;
  };
  Module.prototype.parse = function () {
    var err, error;
    if (l.deb(70)) {
      l.debug("Module::parse() for '" + this.srcFilename + "'");
    }
    try {
      this.AST_top = toAST(this.sourceCodeJs);
    } catch (error) {
      err = error;
      throw new UError("Error parsing Module's '" + this.srcFilename + "' javascript.", { nested: err });
    }
    return this;
  };
  Module.prototype.extract = function () {
    var AMDSignature, args, bodyNode, currentBranchBodyNode, currentConsequent, define, defineFound, defines, factory, factoryParamName, i, idx, k, len1, m, n, o, ref1, ref2, ref3, ref4;
    if (l.deb(70)) {
      l.debug("Module::extract for '" + this.srcFilename + "'");
    }
    this.resetModuleInfo();
    if (isLikeCode("(function(){}).call()", this.AST_top.body) || isLikeCode("(function(){}).apply()", this.AST_top.body)) {
      this.AST_body = this.AST_top.body[0].expression.callee.object.body.body;
      this.AST_preDefineIIFENodes = [];
    } else {
      if (isLikeCode("(function(){})()", this.AST_top.body)) {
        this.AST_body = this.AST_top.body[0].expression.callee.body.body;
        this.AST_preDefineIIFENodes = [];
      } else {
        this.AST_body = this.AST_top.body;
      }
    }
    defines = [];
    ref1 = this.AST_body;
    for (idx = k = 0, len1 = ref1.length; k < len1; idx = ++k) {
      bodyNode = ref1[idx];
      if (bodyNode.expression && isLikeCode("define()", bodyNode)) {
        defines.push(bodyNode.expression);
        if (defines.length > 1) {
          throw new UError("Each AMD file shoule have one (top-level or IIFE) define call - found " + defines.length + " `define` calls");
        }
      } else {
        currentBranchBodyNode = bodyNode;
        currentConsequent = currentBranchBodyNode.consequent;
        defineFound = false;
        while (!defineFound && currentConsequent) {
          if (isLikeCode("define()", currentConsequent.body)) {
            defines.push(currentConsequent.body[0].expression);
            defineFound = true;
            if (defines.length > 1) {
              throw new UError("Each AMD file should have one (top-level or IIFE) define call - found " + defines.length + " `define` calls");
            }
          } else {
            currentBranchBodyNode = currentBranchBodyNode.alternate;
            currentConsequent = currentBranchBodyNode ? currentBranchBodyNode.consequent : null;
          }
        }
        if (!defineFound) {
          if (isLikeCode("({urequire:{}})", bodyNode)) {
            this.flags = eval(this.toCode(bodyNode)).urequire;
          } else {
            if (!(isLikeCode("var define;", bodyNode) || isLikeCode("if(typeof define!==\"function\"){define=require(\"amdefine\")(module);}", bodyNode) || isLikeCode("if(typeof define!==\"function\"){var define=require(\"amdefine\")(module);}", bodyNode)) && !isLikeCode(";", bodyNode) && this.AST_preDefineIIFENodes) {
              this.AST_preDefineIIFENodes.push(bodyNode);
            }
          }
        }
      }
    }
    if (defines.length === 1) {
      define = defines[0];
      args = define["arguments"];
      this.kind = "AMD";
      if (args.length === 3) {
        this.name = args[0].value;
      }
      if (args[args.length - 1].type === "Identifier") {
        AMDSignature = [
          "Literal",
          "ArrayExpression",
          "Identifier"
        ];
        for (i = m = 0, ref2 = args.length - 1; 0 <= ref2 ? m <= ref2 : m >= ref2; i = 0 <= ref2 ? ++m : --m) {
          if (args[i].type !== AMDSignature[i + (3 - args.length)]) {
            throw new UError("Invalid AMD define() signature with " + args.length + " args: got a '" + args[i].type + "' as arg " + i + ", expected a '" + AMDSignature[i + (3 - args.length)] + "'.");
          }
        }
        factoryParamName = args[args.length - 1].name;
        for (i = n = 0, ref3 = this.AST_top.body[0].expression.callee.params.length - 1; 0 <= ref3 ? n <= ref3 : n >= ref3; i = 0 <= ref3 ? ++n : --n) {
          if (this.AST_top.body[0].expression.callee.params[i].name === factoryParamName) {
            factory = this.AST_top.body[0].expression["arguments"][i];
          }
        }
      } else {
        AMDSignature = [
          "Literal",
          "ArrayExpression",
          "FunctionExpression"
        ];
        for (i = o = 0, ref4 = args.length - 1; 0 <= ref4 ? o <= ref4 : o >= ref4; i = 0 <= ref4 ? ++o : --o) {
          if (args[i].type !== AMDSignature[i + (3 - args.length)]) {
            throw new UError("Invalid AMD define() signature with " + args.length + " args: got a '" + args[i].type + "' as arg " + i + ", expected a '" + AMDSignature[i + (3 - args.length)] + "'.");
          }
        }
        factory = args[args.length - 1];
      }
      if (args.length >= 2) {
        this.readArrayDepsAndVars(args[args.length - 2], this.ext_defineArrayDeps, factory.params, this.ext_defineFactoryParams);
      } else {
        this.ext_defineFactoryParams = _.map(factory.params, "name");
      }
      this.AST_factoryBody = factory.body;
    } else {
      this.kind = "nodejs";
      this.AST_factoryBody = _.isEmpty(this.AST_preDefineIIFENodes) ? this.AST_body : this.AST_preDefineIIFENodes;
      delete this.AST_preDefineIIFENodes;
    }
    _B.traverse(this.AST_factoryBody, this.requireFinder);
    if (l.deb(90)) {
      l.debug("'" + this.srcFilename + "' extracted module .info():\n", _.omit(this.info(), [
        "factoryBody",
        "preDefineIIFEBody"
      ]));
    }
    return this;
  };
  Module.prototype.prepare = function () {
    var ar1, ar2, dep, k, lenDiff, pi, ref1, ref2;
    if (l.deb(70)) {
      l.debug("@prepare for '" + this.srcFilename + "'\n");
    }
    this.parameters = this.ext_defineArrayDeps.length === 0 ? [] : this.ext_defineFactoryParams.slice(0, +(this.ext_defineArrayDeps.length - 1) + 1 || 9000000000);
    if (this.ext_defineArrayDeps.length < this.ext_defineFactoryParams.length) {
      if (l.deb(5)) {
        l.deb("module `" + this.path + "`: Discarding redundant define factory parameters", this.ext_defineFactoryParams.slice(this.ext_defineArrayDeps.length));
      }
    }
    if (this.isDummyParams) {
      if ((lenDiff = this.ext_defineArrayDeps.length - this.parameters.length) > 0) {
        for (pi = k = 1, ref1 = lenDiff; 1 <= ref1 ? k <= ref1 : k >= ref1; pi = 1 <= ref1 ? ++k : --k) {
          this.parameters.push("___dummy___param__" + pi);
        }
      }
    }
    this.defineArrayDeps = function () {
      var len1, m, ref2, results;
      ref2 = this.ext_defineArrayDeps;
      results = [];
      for (m = 0, len1 = ref2.length; m < len1; m++) {
        dep = ref2[m];
        results.push(dep.clone());
      }
      return results;
    }.call(this);
    if (ar1 = this.parameters[0] === "require" | (ar2 = (ref2 = this.defineArrayDeps[0]) != null ? typeof ref2.isEqual === "function" ? ref2.isEqual("require") : void 0 : void 0)) {
      if (ar1 && (ar2 || this.defineArrayDeps[0] === void 0)) {
        this.parameters.shift();
        this.defineArrayDeps.shift();
      } else {
        throw new UError("Module '" + this.path + "':" + (ar1 ? "1st define factory argument is 'require', but 1st dependency is '" + this.defineArrayDeps[0] + "'" : "1st dependency is 'require', but 1st define factory argument is '" + this.parameters[0] + "'"));
      }
    }
    return this;
  };
  Module.prototype.adjust = function (build) {
    var addToArrayDependencies, base, k, len1, len2, len3, m, n, newDep, oldDep, oldDeps, ref1, ref10, ref11, ref12, ref13, ref2, ref3, ref4, ref5, ref6, ref7, ref8, ref9, reqDep, rootExports, rt;
    this.build = build;
    if (l.deb(70)) {
      l.debug("@adjust for '" + this.srcFilename + "'");
    }
    if (((ref1 = this.build) != null ? (ref2 = ref1.template) != null ? ref2.name : void 0 : void 0) !== "combined") {
      this.injectDeps((ref3 = this.bundle) != null ? (ref4 = ref3.dependencies) != null ? ref4.imports : void 0 : void 0);
    }
    if (this.flags.rootExports) {
      this.flags.rootExports = _B.arrayize(this.flags.rootExports);
    }
    if (rootExports = (ref5 = this.bundle) != null ? (ref6 = ref5.dependencies) != null ? (ref7 = ref6.rootExports) != null ? ref7[this.path] : void 0 : void 0 : void 0) {
      ref8 = _B.arrayize(rootExports);
      for (k = 0, len1 = ref8.length; k < len1; k++) {
        rt = ref8[k];
        if (indexOf.call(this.flags.rootExports || [], rt) < 0) {
          ((base = this.flags).rootExports || (base.rootExports = [])).push(rt);
        }
      }
      this.flags.noConflict = this.isRootExports_noConflict;
    }
    this.webRootMap = ((ref9 = this.bundle) != null ? ref9.webRootMap : void 0) || ".";
    addToArrayDependencies = function (_this) {
      return function (reqDep) {
        var foundDeps, len2, m, ref10, results, rl;
        if (!reqDep.isNode) {
          foundDeps = _.filter(_this.defineArrayDeps, function (dep) {
            return dep.isEqual(reqDep);
          });
          if (_.isEmpty(foundDeps)) {
            return _this.defineArrayDeps.push(reqDep);
          } else {
            ref10 = reqDep.AST_requireLiterals || [];
            results = [];
            for (m = 0, len2 = ref10.length; m < len2; m++) {
              rl = ref10[m];
              results.push(_.last(foundDeps).AST_requireLiterals.push(rl));
            }
            return results;
          }
        }
      };
    }(this);
    if (!(_.isEmpty(this.defineArrayDeps) && this.isScanAllow && !this.flags.rootExports)) {
      ref10 = this.ext_requireDeps;
      for (m = 0, len2 = ref10.length; m < len2; m++) {
        reqDep = ref10[m];
        addToArrayDependencies(reqDep);
      }
    }
    this.updateRequireLiteralASTs();
    ref13 = ((ref11 = this.bundle) != null ? (ref12 = ref11.dependencies) != null ? ref12.replace : void 0 : void 0) || {};
    for (newDep in ref13) {
      oldDeps = ref13[newDep];
      for (n = 0, len3 = oldDeps.length; n < len3; n++) {
        oldDep = oldDeps[n];
        this.replaceDep(oldDep, newDep, { relative: "bundle" });
      }
    }
    return this;
  };
  Module.prototype.updateRequireLiteralASTs = function () {
    var dep, k, len1, ref1, results;
    ref1 = _.uniq(_.flatten([
      this.defineArrayDeps,
      this.ext_requireDeps,
      this.ext_asyncRequireDeps
    ]));
    results = [];
    for (k = 0, len1 = ref1.length; k < len1; k++) {
      dep = ref1[k];
      if (dep && !dep.untrusted) {
        results.push(dep.updateAST());
      } else {
        results.push(void 0);
      }
    }
    return results;
  };
  Module.prototype.injectDeps = function (depVars) {
    var dep, depName, dependenciesBindingsBlender, k, len1, ref1, varName, varNames;
    if (l.deb(40)) {
      if (!_.isEmpty(depVars)) {
        l.debug(this.path + ": injecting dependencies: ", depVars);
      }
    }
    if (!this.parameters) {
      throw new UError("Can't use `Module.injectDeps` so early - for now use it on `runAt = 'beforeTemplate` RCs only!");
    }
    dependenciesBindingsBlender = require("../config/blendConfigs").dependenciesBindingsBlender;
    if (_.isEmpty(depVars = dependenciesBindingsBlender.blend(depVars))) {
      return;
    }
    if ((ref1 = this.bundle) != null) {
      if (typeof ref1.inferEmptyDepVars === "function") {
        ref1.inferEmptyDepVars(depVars, "Infering empty depVars from injectDeps for '" + this.path + "'");
      }
    }
    for (depName in depVars) {
      varNames = depVars[depName];
      dep = new Dependency(depName, this);
      if (!dep.isEqual(this.path)) {
        for (k = 0, len1 = varNames.length; k < len1; k++) {
          varName = varNames[k];
          if (!(indexOf.call(this.parameters, varName) >= 0)) {
            this.defineArrayDeps.splice(this.parameters.length, 0, dep);
            this.parameters.push(varName);
            if (l.deb(70)) {
              l.debug(this.path + ": injected dependency '" + depName + "' as parameter '" + varName + "'");
            }
          } else {
            l.warn(this.path + ": NOT injecting dependency '" + depName + "' as parameter '" + varName + "' cause it already exists.");
          }
        }
      } else {
        if (l.deb(50)) {
          l.debug(this.path + ": NOT injecting dependency '" + depName + "' on self'");
        }
      }
    }
    return null;
  };
  Module.prototype.replaceDep = function (matchDep, newDep, options) {
    var debugHead, dep, depIdx, depName, err, isMatch, k, len1, m, rai, ref1, removeArrayIdxs, updDep;
    if (options == null) {
      options = {};
    }
    if (l.deb(70)) {
      l.deb(debugHead = "Module.replaceDep " + (newDep ? "REPLACING" : " DELETING") + ": " + util.inspect(options) + " " + util.inspect(matchDep) + ", " + util.inspect(newDep));
    }
    if (_.isString(matchDep)) {
      matchDep = new Dependency(matchDep, this);
    }
    if (matchDep instanceof Dependency) {
      if (!options.relative && !matchDep.isRelative) {
        options.relative = "bundle";
      }
    }
    if (newDep) {
      if (!(newDep instanceof Dependency)) {
        if (_.isString(newDep)) {
          newDep = new Dependency(newDep, this);
        } else {
          if (!_.isFunction(newDep)) {
            l.er(err = debugHead + " Wrong new dependency type '" + newDep + "' in module " + this.path + " - should be String|Dependency|Undefined.");
            throw new UError(err);
          }
        }
      }
    }
    removeArrayIdxs = [];
    ref1 = this.defineArrayDeps || [];
    for (depIdx = k = 0, len1 = ref1.length; k < len1; depIdx = ++k) {
      dep = ref1[depIdx];
      depName = dep.name(options);
      if (isMatch = _.isFunction(matchDep) ? matchDep(depName, dep, options) : dep.isMatch(matchDep, options)) {
        if (!newDep) {
          l.debug(90, "mark depIdx for lazy removal '" + depIdx + "'");
          removeArrayIdxs.push(depIdx);
        } else {
          if (matchDep !== newDep) {
            updDep = _.isFunction(newDep) ? newDep(depName, dep) : newDep;
            if (_.isString(updDep)) {
              updDep = new Dependency(updDep, this);
            }
            if (updDep) {
              if (!(updDep instanceof Dependency)) {
                l.er(err = "Wrong newDep dependency type '" + matchDep + "' in module " + this.path + " - should be String|Function|Dependency.");
                throw new UError(err);
              } else {
                dep.update(updDep, matchDep, options);
              }
            } else {
              l.deb(90, "mark idx for lazy removal, returned from Function newDep '" + depIdx + "'");
              removeArrayIdxs.push(depIdx);
            }
          }
        }
      }
    }
    for (m = removeArrayIdxs.length - 1; m >= 0; m += -1) {
      rai = removeArrayIdxs[m];
      if (l.deb(80)) {
        l.deb("delete dependency '" + this.defineArrayDeps[rai] + "'");
      }
      this.defineArrayDeps.splice(rai, 1);
      this.parameters.splice(rai, 1);
    }
    return null;
  };
  Module.prototype.getDepsVars = function (depFltr) {
    var bundleRelativeDep, dep, depVarArrays, depVars, depsArrayName, dv, idx, k, len1, ref1, ref2, varsArrayName;
    if (depFltr == null) {
      depFltr = function () {
        return true;
      };
    }
    depVars = {};
    depVarArrays = {
      "defineArrayDeps": "parameters",
      "ext_requireDeps": "ext_requireVars",
      "ext_asyncRequireDeps": "ext_asyncFactoryParams"
    };
    for (depsArrayName in depVarArrays) {
      varsArrayName = depVarArrays[depsArrayName];
      ref1 = this[depsArrayName] || [];
      for (idx = k = 0, len1 = ref1.length; k < len1; idx = ++k) {
        dep = ref1[idx];
        if (!depFltr(dep)) {
          continue;
        }
        bundleRelativeDep = dep.name({ relative: "bundle" });
        dv = depVars[bundleRelativeDep] || (depVars[bundleRelativeDep] = []);
        if (this[varsArrayName][idx] && !(ref2 = this[varsArrayName][idx], indexOf.call(dv, ref2) >= 0)) {
          dv.push(this[varsArrayName][idx]);
        }
      }
    }
    return depVars;
  };
  Module.prototype.replaceCode = function (matchCode, replCode) {
    return replaceCode(this.AST_factoryBody, matchCode, replCode);
  };
  Module.prototype.addReportData = function () {
    var dep, k, len1, ref1, ref2, ref3, results;
    ref1 = _.flatten([
      this.defineArrayDeps,
      this.ext_asyncRequireDeps,
      _.filter(this.ext_requireDeps, function (dep) {
        return dep.isNode;
      })
    ]);
    results = [];
    for (k = 0, len1 = ref1.length; k < len1; k++) {
      dep = ref1[k];
      if ((ref2 = dep.type) !== "bundle" && ref2 !== "system") {
        results.push((ref3 = this.bundle) != null ? ref3.reporter.addReportData(_B.okv(dep.type, dep.name()), this.path) : void 0);
      } else {
        results.push(void 0);
      }
    }
    return results;
  };
  Module.prototype.convert = function (build) {
    var step;
    this.build = build;
    step = null;
    return When.sequence([
      function (_this) {
        return function () {
          l.deb(90, step = "\nRunning @adjust for '" + _this.path + "'.");
          return _this.adjust(_this.build);
        };
      }(this),
      function (_this) {
        return function () {
          l.deb(70, step = "\n ResourceConverters runAt: 'beforeTemplate' for '" + _this.path + "'.");
          return _this.runResourceConverters(function (rc) {
            return rc.runAt === "beforeTemplate";
          });
        };
      }(this),
      function (_this) {
        return function () {
          l.verbose(step = "Converting with template '" + _this.build.template.name + "' for module '" + _this.path + "'.");
          if (l.deb(70)) {
            l.deb("'" + _this.path + "' adjusted module.info() = \n", _.pick(_this.info(), _.flatten([
              _this.keys_resolvedDependencies,
              "parameters",
              "kind",
              "name",
              "flags"
            ])));
          }
          _this.moduleTemplate || (_this.moduleTemplate = new ModuleGeneratorTemplates(_this));
          return _this.converted = _this.moduleTemplate[_this.build.template.name]();
        };
      }(this),
      function (_this) {
        return function () {
          l.deb(70, step = "\n ResourceConverters runAt: 'afterTemplate' for '" + _this.path + "'.");
          return _this.runResourceConverters(function (rc) {
            return rc.runAt === "afterTemplate";
          });
        };
      }(this),
      function (_this) {
        return function () {
          l.deb(70, step = "\nRunning optimize for '" + _this.path + "'.");
          return _this.optimize(_this.build);
        };
      }(this),
      function (_this) {
        return function () {
          l.deb(70, step = "\n ResourceConverters runAt: 'afterOptimize' for '" + _this.path + "'.");
          return _this.runResourceConverters(function (rc) {
            return rc.runAt === "afterOptimize";
          });
        };
      }(this),
      function (_this) {
        return function () {
          l.deb(70, step = "\n addReportData '" + _this.path + "'.");
          return _this.addReportData();
        };
      }(this)
    ])["catch"](function (_this) {
      return function (err) {
        _this.reset();
        _this.hasErrors = true;
        return _this.bundle.handleError(new UError("Error at `module.convert()`: step = `" + step + "`", { nested: err }));
      };
    }(this));
  };
  Module.prototype.optimize = function (build) {
    var options;
    this.build = build;
    if (this.build.template.name !== "combined") {
      if (this.build.optimize) {
        if (this.build.optimize === "uglify2") {
          l.verbose("Optimizing '" + this.path + "' with UglifyJS2...");
          this.UglifyJS2 || (this.UglifyJS2 = require("uglify-js"));
          (options = this.build.uglify2 || {}).fromString = true;
          this.converted = this.UglifyJS2.minify(this.converted, options).code;
        } else {
          l.warn("Not using `build.optimize` with '" + this.build.optimize + "' - only 'uglify2' works for Modules.");
        }
      }
    }
    return this.converted;
  };
  Object.defineProperties(Module.prototype, {
    nodeDeps: {
      get: function () {
        var k, len1, nds, ref1, ref2, ref3, ref4, ref5, remainingDep;
        if (this.isAllNodeRequires) {
          return this.defineArrayDeps;
        } else {
          if (!((ref1 = this.parameters) != null ? ref1.length : void 0)) {
            nds = [];
          } else {
            nds = ((ref2 = this.defineArrayDeps) != null ? ref2.slice(0, +(((ref3 = this.parameters) != null ? ref3.length : void 0) - 1) + 1 || 9000000000) : void 0) || [];
          }
          if (this.defineArrayDeps) {
            ref5 = this.defineArrayDeps.slice((ref4 = this.parameters) != null ? ref4.length : void 0, +(this.defineArrayDeps.length - 1) + 1 || 9000000000);
            for (k = 0, len1 = ref5.length; k < len1; k++) {
              remainingDep = ref5[k];
              if (!_.any(this.ext_requireDeps || [], function (rdep) {
                  return rdep.isEqual(remainingDep);
                })) {
                nds.push(remainingDep);
              }
            }
          }
          return nds;
        }
      }
    },
    path: {
      get: function () {
        if (this.srcFilename) {
          return upath.trimExt(this.srcFilename);
        }
      }
    },
    factoryBody: {
      get: function () {
        var fb;
        this.updateRequireLiteralASTs();
        fb = this.toCode(this.AST_factoryBody);
        if (this.kind === "AMD") {
          fb = fb.slice(1, +(fb.length - 2) + 1 || 9000000000).trim();
        }
        return fb;
      }
    },
    "preDefineIIFEBody": {
      get: function () {
        this.updateRequireLiteralASTs();
        if (this.AST_preDefineIIFENodes) {
          return this.toCode(this.AST_preDefineIIFENodes);
        }
      }
    }
  });
  Module.prototype.toCode = function (astCode, codegenOptions) {
    if (astCode == null) {
      astCode = this.AST_body;
    }
    if (codegenOptions == null) {
      codegenOptions = this.codegenOptions;
    }
    this.updateRequireLiteralASTs();
    return toCode(astCode, codegenOptions);
  };
  return Module;
}(TextResource);
module.exports = Module;
_.extend(module.exports.prototype, {
  l: l,
  _: _,
  _B: _B
});

;