// Generated by uRequire v0.7.0-beta.23 target: 'lib' template: 'nodejs'

var _ = require('lodash'),
    _B = require('uberscore'),
    UError = require('../utils/UError');

var l = new _B.Logger('uRequire/fileResources/Dependency');

var Dependency, MasterDefaultsConfig, minimatch, pathRelative, umatch, untrust, upath, util, indexOf = [].indexOf || function (item) {
    for (var i = 0, l = this.length; i < l; i++) {
      if (i in this && this[i] === item)
        return i;
    }
    return -1;
  };
_.mixin(require("underscore.string").exports());
util = require("util");
minimatch = require("minimatch");
upath = require("upath");
umatch = require("umatch");
MasterDefaultsConfig = require("../config/MasterDefaultsConfig");
pathRelative = require("../paths/pathRelative");
untrust = function (str) {
  str = new String(str + "");
  str.untrusted = true;
  str.inspect = function () {
    return "'" + this + "' (untrusted Dependency)";
  };
  return str;
};
Dependency = function () {
  var TYPES, fn, i, isSameJSFile, len, type;
  Dependency.defaults = { untrusted: false };
  function Dependency(depString, module1, defaults) {
    this.module = module1;
    if (defaults == null) {
      defaults = Dependency.defaults;
    }
    if (defaults !== Dependency.defaults) {
      _.defaults(this, defaults);
    }
    this.AST_requireLiterals || (this.AST_requireLiterals = []);
    this.depString = depString;
  }
  Dependency.prototype.clone = function () {
    return new Dependency(this.depString, this.module, {
      AST_requireLiterals: this.AST_requireLiterals,
      untrusted: this.untrusted
    });
  };
  Object.defineProperties(Dependency.prototype, {
    depString: {
      get: function () {
        if (this.untrusted) {
          return untrust(this._depString);
        } else {
          return this._depString;
        }
      },
      set: function (depString) {
        var dp, ext, indexOfSep;
        if (depString == null) {
          depString = "";
        }
        this._depString = depString;
        dp = depString.replace(/\\/g, "/");
        indexOfSep = dp.indexOf("!");
        if (indexOfSep > 0) {
          if (!this.plugin) {
            this.plugin = new Dependency(dp.slice(0, +(indexOfSep - 1) + 1 || 9000000000), this);
          } else {
            this.plugin.depString = dp.slice(0, +(indexOfSep - 1) + 1 || 9000000000);
          }
        } else {
          delete this.plugin;
        }
        this.originalResourceName = indexOfSep >= 0 ? dp.slice(indexOfSep + 1, +(dp.length - 1) + 1 || 9000000000) : dp;
        this.resourceName = upath.normalizeSafe(this.originalResourceName);
        if (_.last(this.resourceName) === "|") {
          this.resourceName = this.resourceName.slice(0, +(this.resourceName.length - 2) + 1 || 9000000000);
          this.isPartial = true;
        }
        if (_.last(this.resourceName) === "/") {
          this.resourceName = this.resourceName.slice(0, +(this.resourceName.length - 2) + 1 || 9000000000);
        }
        if (ext = upath.extname(this.resourceName)) {
          if (ext === ".js") {
            this.extname = upath.extname(this.resourceName);
            this.resourceName = upath.trimExt(this.resourceName);
          }
        }
        return this.updateAST();
      }
    }
  });
  Dependency.prototype.updateAST = function () {
    var depLiteral, i, len, name, ref, results;
    ref = this.AST_requireLiterals || [];
    results = [];
    for (i = 0, len = ref.length; i < len; i++) {
      depLiteral = ref[i];
      if (depLiteral.value !== (name = this.name())) {
        l.debug(80, "Replacing AST literal '" + depLiteral.value + "' with '" + name + "'");
        results.push(depLiteral.value = name);
      } else {
        results.push(void 0);
      }
    }
    return results;
  };
  TYPES = [
    "notFoundInBundle",
    "external",
    "untrusted",
    "system",
    "bundle",
    "nodeLocal"
  ];
  fn = function (type) {
    return Object.defineProperty(Dependency.prototype, "is" + _.capitalize(type), {
      get: function () {
        return this.type === type;
      }
    });
  };
  for (i = 0, len = TYPES.length; i < len; i++) {
    type = TYPES[i];
    fn(type);
  }
  Object.defineProperties(Dependency.prototype, {
    isLocal: {
      get: function () {
        var ref;
        return (ref = this.type) === "local" || ref === "nodeLocal";
      }
    },
    pluginName: {
      get: function () {
        if (this.plugin) {
          return this.plugin.name();
        } else {
          return "";
        }
      }
    },
    type: {
      get: function () {
        var ref;
        if (this.untrusted) {
          return "untrusted";
        } else {
          if ((ref = this.depString) === "require" || ref === "exports" || ref === "module") {
            return "system";
          } else {
            if (this.isWebRootMap) {
              return "webRootMap";
            } else {
              if (this.isNode) {
                if (this._isInLocals || this.resourceName.indexOf("/") < 0) {
                  return "nodeLocal";
                } else {
                  return "node";
                }
              } else {
                if (this.isFound || this.isFoundAsIndex) {
                  return "bundle";
                } else {
                  if (!this._isBundleBoundary) {
                    return "external";
                  } else {
                    if (this.resourceName.indexOf("/") < 0 || this._isInLocals) {
                      return "local";
                    } else {
                      return "notFoundInBundle";
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    _isInLocals: {
      get: function () {
        var depPlace, depPlaces, deps, firstPart, j, len1, pkg;
        firstPart = this.resourceName.split("/")[0];
        deps = this.module.bundle.dependencies;
        pkg = this.module.bundle["package"];
        depPlaces = [
          deps.locals,
          MasterDefaultsConfig.bundle.dependencies.locals,
          deps.paths.bower,
          pkg.dependencies,
          pkg.devDependencies
        ];
        for (j = 0, len1 = depPlaces.length; j < len1; j++) {
          depPlace = depPlaces[j];
          if (depPlace) {
            if (depPlace[firstPart]) {
              return true;
            }
          }
        }
        return false;
      }
    },
    isNode: {
      get: function () {
        var ref, ref1, ref2;
        return ((ref = this.plugin) != null ? typeof ref.name === "function" ? ref.name() : void 0 : void 0) === "node" || umatch(this.name({
          plugin: false,
          relative: "bundle"
        }), ((ref1 = this.module.bundle) != null ? (ref2 = ref1.dependencies) != null ? ref2.node : void 0 : void 0) || MasterDefaultsConfig.bundle.dependencies.node);
      }
    },
    isFound: {
      get: function () {
        var ref, ref1;
        if (_.isArray((ref = this.module.bundle) != null ? ref.dstFilenames : void 0)) {
          return ref1 = upath.addExt(this._bundleRelative, ".js"), indexOf.call(this.module.bundle.dstFilenames, ref1) >= 0;
        }
      }
    },
    isFoundAsIndex: {
      get: function () {
        var ref, ref1;
        if (_.isArray((ref = this.module.bundle) != null ? ref.dstFilenames : void 0)) {
          return ref1 = upath.normalize(upath.addExt(this._bundleRelative + "/index", ".js")), indexOf.call(this.module.bundle.dstFilenames, ref1) >= 0;
        }
      }
    },
    isWebRootMap: {
      get: function () {
        return this.resourceName[0] === "/";
      }
    },
    isRelative: {
      get: function () {
        return this.resourceName[0] === ".";
      }
    },
    _bundleRelative: {
      get: function () {
        if (this.untrusted) {
          return this.depString;
        } else {
          if (this.isRelative) {
            return upath.join(upath.dirname(this.module.path || "."), this.resourceName);
          } else {
            return upath.normalizeSafe(this.resourceName);
          }
        }
      }
    },
    _fileRelative: {
      get: function () {
        if (this.untrusted) {
          return this._depString;
        } else {
          if (this.module.path && (this.isFound || this.isFoundAsIndex)) {
            return pathRelative(upath.dirname(this.module.path || "__root__"), this._bundleRelative, {
              dot4Current: true,
              assumeRoot: true
            });
          } else {
            return upath.normalizeSafe(this.resourceName);
          }
        }
      }
    },
    _isBundleBoundary: {
      get: function () {
        if (this.untrusted || this.isWebRootMap) {
          return false;
        } else {
          return this.pathToRoot !== null;
        }
      }
    },
    pathToRoot: {
      get: function () {
        return pathRelative(this.module.path + "/../../" + this.resourceName, ".", { assumeRoot: true });
      }
    },
    modulePathToRoot: {
      get: function () {
        return pathRelative(upath.dirname(this.module.path || "__root__"), "/", { assumeRoot: true });
      }
    }
  });
  Dependency.prototype.name = function (options) {
    var appendIndex;
    if (options == null) {
      options = {};
    }
    if (this.untrusted) {
      return this.depString;
    } else {
      if (options.ext == null) {
        options.ext = false;
      }
      if (options.plugin == null) {
        options.plugin = true;
      }
      if (options.relative == null) {
        options.relative = "file";
      }
      if (options.quote == null) {
        options.quote = false;
      }
      appendIndex = !this.isFound && this.isFoundAsIndex ? "/index" : "";
      return (options.quote ? "'" : "") + (options.plugin && this.plugin && !this.isNode ? this.plugin.name() + "!" : "") + (options.relative === "bundle" ? upath.join(this._bundleRelative, appendIndex) : this._fileRelative + appendIndex) + (options.ext === false || !this.extname ? "" : this.extname) + (options.quote ? "'" : "");
    }
  };
  Dependency.prototype.toString = function () {
    return this.depString;
  };
  Dependency.prototype.inspect = function () {
    if (this.untrusted) {
      return this.depString;
    } else {
      return "'" + this.name() + "'";
    }
  };
  Dependency.prototype.isEqual = function (dep) {
    var ref;
    if (dep === this) {
      return true;
    }
    if (!dep || this.untrusted) {
      return false;
    }
    if (!(dep instanceof Dependency)) {
      dep = new Dependency(dep, this.module);
    }
    if (this.module.bundle != null !== (((ref = dep.module) != null ? ref.bundle : void 0) != null)) {
      return false;
    }
    return isSameJSFile(this.name({
      relative: "bundle",
      ext: true
    }), dep.name({
      relative: "bundle",
      ext: true
    }));
  };
  isSameJSFile = function (a, b) {
    return upath.addExt(a, ".js") === upath.addExt(b, ".js");
  };
  Dependency.prototype.isMatch = function (matchDep, options) {
    var err, matchDepName, ref, thisName;
    if (l.deb(105)) {
      l.deb("isMatch: options =", options, "\nmatchDep =", matchDep, "\n@ =", this);
    }
    if (!matchDep || this.untrusted) {
      return false;
    }
    if (_.isRegExp(matchDep)) {
      return matchDep.test(this.name(options));
    }
    if (_.isString(matchDep)) {
      matchDep = new Dependency(matchDep, this.module);
    }
    if (!(matchDep instanceof Dependency)) {
      l.er(err = "Dependency.isMatch: wrong dependency type '" + matchDep + "' should be String|RegExp|Dependency.");
      throw new UError(err);
    } else {
      if (this.module.bundle != null !== (((ref = matchDep.module) != null ? ref.bundle : void 0) != null)) {
        if (l.deb(120)) {
          l.deb("isMatch: false cause of module.bundle");
        }
        return false;
      }
      if (this.plugin && !this.plugin.isMatch(matchDep.plugin, options)) {
        if (l.deb(120)) {
          l.deb("isMatch: false cause of @plugin.isMatch");
        }
        return false;
      }
      matchDepName = matchDep.resourceName;
      thisName = this.name({
        plugin: false,
        relative: options.relative
      });
      if (matchDep.isPartial) {
        if (!_.startsWith(thisName, matchDepName)) {
          if (l.deb(120)) {
            l.deb("isMatch: false cause isPartial _.startsWith '" + thisName + "', '" + matchDepName + "'");
          }
          return false;
        }
      } else {
        matchDepName = upath.addExt(matchDepName, ".js");
        thisName = upath.addExt(thisName, ".js");
        if (!minimatch(matchDepName, thisName)) {
          if (l.deb(120)) {
            l.deb("isMatch: false cause of false minimatch('" + matchDepName + "', '" + thisName + "')");
          }
          return false;
        }
      }
      if (l.deb(110)) {
        l.deb("isMatch: true");
      }
      return true;
    }
  };
  Dependency.prototype.update = function (newDep, matchDep, options) {
    var newDepPaths, newDepString, noPluginOptions, partialPath;
    if (l.deb(80)) {
      l.deb("update: options =", options, "\n@ =", this, "\nnewDep =", newDep, "\nmatchDep =", matchDep);
    }
    newDepPaths = [];
    if (options.relative === "bundle" && newDep.isRelative) {
      l.deb(110, "update: translate {relative:'bundle'} path to {relative:'file'}. Adding @modulePathToRoot = ", this.modulePathToRoot);
      newDepPaths.push(this.modulePathToRoot);
    }
    newDepPaths.push(newDep.name({
      relative: "file",
      plugin: false,
      ext: true
    }));
    (noPluginOptions = _.clone(options)).plugin = false;
    if (matchDep && matchDep.isPartial) {
      partialPath = this.name(noPluginOptions).slice(matchDep.name({ plugin: false }).length + 1);
      l.deb(110, "update: adding partialPath =", partialPath);
      newDepPaths.push(partialPath);
    }
    newDepString = upath.joinSafe.apply(null, newDepPaths);
    if (newDep.plugin) {
      if (this.plugin) {
        newDepString = this.plugin.update(newDep.plugin, matchDep != null ? matchDep.plugin : void 0, options) + "!" + newDepString;
      } else {
        newDepString = newDep.pluginName + "!" + newDepString;
      }
    }
    if (l.deb(90)) {
      l.deb("Dependency.update replacing @depString '" + this.depString + "' with '" + newDepString + "'.");
    }
    return this.depString = newDepString;
  };
  return Dependency;
}();
module.exports = Dependency;
_.extend(module.exports.prototype, {
  l: l,
  _: _,
  _B: _B
});

;