// Generated by uRequire v0.7.0-beta.23 target: 'lib' template: 'nodejs'

var _ = require('lodash'),
    _B = require('uberscore'),
    UError = require('../utils/UError');

var l = new _B.Logger('uRequire/config/ResourceConverter');

var ResourceConverter, l, upath, indexOf = [].indexOf || function (item) {
    for (var i = 0, l = this.length; i < l; i++) {
      if (i in this && this[i] === item)
        return i;
    }
    return -1;
  };
l = new _B.Logger("uRequire/config/ResourceConverter", 0);
upath = require("upath");
ResourceConverter = function () {
  var getResourceConverterObject, nameFlags, nameFlagsActions;
  function ResourceConverter(rc) {
    rc = getResourceConverterObject(rc);
    if (_B.isHash(rc)) {
      this.update(rc);
    } else {
      return rc;
    }
  }
  ResourceConverter.prototype.update = function (rc) {
    var key, ref, ref1, ref2, ref3, val;
    if (rc !== this) {
      _.extend(this, _.omit(rc, function (v, k, o) {
        return k === "options" || !_.has(o, k);
      }));
      if (rc.options) {
        if (rc.options.$) {
          _.extend(this, rc.options.$);
          delete rc.options["$"];
        }
        ref = rc.options;
        for (key in ref) {
          val = ref[key];
          if (_.startsWith(key, "$")) {
            this[key.slice(1)] = val;
            delete rc.options[key];
          }
        }
      }
      _.extend(this.options || (this.options = {}), rc.options);
      if (this.isModule) {
        l.warn("DEPRACATED key 'isModule' found in ResourcesConverter with `name: '" + rc.name + "'`. Use `type: 'module'` instead.");
        this.type = "module";
      }
      this.descr || (this.descr = "No descr for ResourceConverter '" + this.name + "'");
      if (this.enabled == null) {
        this.enabled = true;
      }
      if (this.filez == null) {
        this.filez = [/./];
      }
      if (this.isTerminal == null) {
        this.isTerminal = false;
      }
      if (this.isMatchSrcFilename == null) {
        this.isMatchSrcFilename = false;
      }
      this.runAt || (this.runAt = "");
    }
    if (ref1 = this.runAt, indexOf.call(ResourceConverter.runAt_all, ref1) < 0) {
      throw new UError("ResourceConverter '" + this.name + "': `runAt` '" + this.runAt + "' isnt valid - use one of " + l.prettify(runAtAll) + " ");
    }
    if (((ref2 = this.type) === "file" || ref2 === "text" || ref2 === "bundle") && (ref3 = this.runAt, indexOf.call(ResourceConverter.runAt_modOnly, ref3) >= 0)) {
      throw new UError("ResourceConverter '" + this.name + "': you should NOT have a non-module (" + this.type + ") RC with any of " + l.prettify(runAtModOnly) + ".");
    }
    return this;
  };
  ResourceConverter.runAt_all = [
    "",
    "beforeTemplate",
    "afterTemplate",
    "afterOptimize",
    "afterSave"
  ];
  ResourceConverter.runAt_modOnly = [
    "beforeTemplate",
    "afterTemplate",
    "afterOptimize"
  ];
  ResourceConverter.prototype.clone = function () {
    var rc;
    rc = _.clone(this, true);
    if (this[" convFilename"]) {
      rc.convFilename = this[" convFilename"];
    }
    return new ResourceConverter(rc);
  };
  Object.defineProperties(ResourceConverter.prototype, {
    name: {
      get: function () {
        return this[" name"];
      },
      set: function (name) {
        var flag, oldName, ref, uerr;
        if (!name || !_.isString(name)) {
          l.er(uerr = "ResourceConverter `name` should be a unique, non empty String - was '" + name + "'");
          throw new UError(uerr);
        }
        while (ref = flag = name[0], indexOf.call(nameFlags, ref) >= 0) {
          nameFlagsActions[flag](this);
          name = name.slice(1);
        }
        oldName = this[" name"];
        if (ResourceConverter.registry[oldName] === this && name !== oldName) {
          l.warn("Renaming RC '" + oldName + "' to '" + name + "' on ResourceConverter.registry.");
          delete ResourceConverter.registry[oldName];
          ResourceConverter.registry[name] = this;
        }
        return this[" name"] = name;
      }
    },
    type: {
      get: function () {
        return this[" type"];
      },
      set: function (type) {
        var types, uerr;
        if (indexOf.call(types = [
            "bundle",
            "file",
            "text",
            "module"
          ], type) < 0) {
          l.er(uerr = "Invalid resourceConverter.type '" + type + "' - must be in [" + types.join(",") + "]");
          throw new UError(uerr);
        }
        return this[" type"] = type;
      }
    },
    clazz: {
      get: function () {
        switch (this.type) {
        case "bundle":
          return require("../fileResources/BundleFile");
        case "file":
          return require("../fileResources/FileResource");
        case "text":
          return require("../fileResources/TextResource");
        case "module":
          return require("../fileResources/Module");
        }
      }
    },
    convFilename: {
      enumerable: true,
      get: function () {
        return this._convFilename;
      },
      set: function (cf) {
        var isSrcFilename, uerr;
        if (cf) {
          this[" convFilename"] = cf;
          if (_.isString(cf)) {
            if (cf[0] === "~") {
              cf = cf.slice(1);
              isSrcFilename = true;
            }
            if (cf[0] === ".") {
              cf = function (ext) {
                return function (dstFilename, srcFilename) {
                  return upath.changeExt(isSrcFilename ? srcFilename : dstFilename, ext);
                };
              }(cf);
            } else {
              cf = function (filename) {
                return function () {
                  return filename;
                };
              }(cf);
            }
          } else {
            if (!(_.isFunction(cf) || _.isUndefined(cf))) {
              l.er(uerr = "ResourceConverter error: `convFilename` is neither String|Function|Undefined.");
              throw new UError(uerr);
            }
          }
          return this._convFilename = cf;
        }
      }
    }
  });
  ResourceConverter.registry = {};
  ResourceConverter.searchRegisterUpdate = function (rc) {
    var err, error, name, rcFound, rcResult, ref;
    if (_.isString(rc)) {
      name = rc;
      while (ref = name[0], indexOf.call(nameFlags, ref) >= 0) {
        name = name.slice(1);
      }
      if (!(rcResult = ResourceConverter.registry[name])) {
        rcResult = "urequire-rc-" + name;
        l.deb(80, "Loading ResourceConverter '" + rcResult + "' from node_modules.");
        try {
          rcResult = require(rcResult);
        } catch (error) {
          err = error;
          throw new UError("ResourceConverter as a String not found in registry nor 'node_modules'.\nRC name = '" + name + "', searchNameOrRC = " + l.prettify(rc) + "\n" + l.prettify(err));
        }
      }
      if (!(rcResult instanceof ResourceConverter)) {
        rcResult = ResourceConverter.registry[name] = new ResourceConverter(rcResult);
      }
      rcResult.name = rc;
    } else {
      if (!(rc instanceof ResourceConverter)) {
        rcResult = rc = new ResourceConverter(rc);
      }
      if (rc && !_.isEmpty(rc)) {
        if (rcFound = ResourceConverter.registry[rc.name]) {
          if (!(rcFound instanceof ResourceConverter)) {
            rcFound = new ResourceConverter(rcFound);
          }
          rcResult = ResourceConverter.registry[rc.name] = rcFound.update(rc);
        } else {
          rcResult = ResourceConverter.registry[rc.name] = rc;
        }
      }
    }
    return rcResult;
  };
  getResourceConverterObject = function (rc) {
    var convFilename, convert, descr, filez, isLikeFilez, name, options, ref, ref1, ref2, ref3;
    isLikeFilez = function (v) {
      return _.isArray(v) || _.isString(v) || _.isRegExp(v);
    };
    if (_.isFunction(rc)) {
      rc = rc.call(ResourceConverter.searchRegisterUpdate, ResourceConverter.searchRegisterUpdate);
      return getResourceConverterObject(rc);
    }
    if (_.isString(rc)) {
      return getResourceConverterObject(ResourceConverter.searchRegisterUpdate(rc));
    }
    if (_.isArray(rc)) {
      if (_.isString(rc[0])) {
        if (_.isString(rc[1]) && isLikeFilez(rc[2])) {
          ref = [
            rc[0],
            rc[1],
            rc[2],
            rc[3],
            rc[4],
            rc[5]
          ], name = ref[0], descr = ref[1], filez = ref[2], convert = ref[3], convFilename = ref[4], options = ref[5];
        } else {
          if (isLikeFilez(rc[1])) {
            if (_.isFunction(rc[2])) {
              ref1 = [
                rc[0],
                rc[1],
                rc[2],
                rc[3],
                rc[4]
              ], name = ref1[0], filez = ref1[1], convert = ref1[2], convFilename = ref1[3], options = ref1[4];
            } else if (_B.isHash(rc[2])) {
              ref2 = [
                rc[0],
                rc[1],
                rc[2]
              ], name = ref2[0], filez = ref2[1], options = ref2[2];
              rc = ResourceConverter.searchRegisterUpdate(name);
              rc.options = options;
              rc.filez = filez;
              return getResourceConverterObject(rc);
            }
          } else {
            if (_B.isHash(rc[1])) {
              ref3 = [
                rc[0],
                rc[1]
              ], name = ref3[0], options = ref3[1];
              rc = ResourceConverter.searchRegisterUpdate(name);
              rc.options = options;
              return getResourceConverterObject(rc);
            } else {
              throw new UError("Unknown ResourceConverter signature:" + l.prettify(rc));
            }
          }
        }
        if (_B.isHash(convFilename)) {
          options = convFilename;
          convFilename = void 0;
        }
        rc = {
          name: name,
          descr: descr,
          filez: filez,
          convert: convert,
          convFilename: convFilename,
          options: options
        };
      } else {
        throw new UError("Unknown ResourceConverter signature:" + l.prettify(rc));
      }
    }
    if (rc && !_B.isHash(rc)) {
      throw new UError("Bogus ResourceConverter at getResourceConverterObject:" + l.prettify(rc));
    }
    return rc;
  };
  nameFlagsActions = {
    "&": function (rc) {
      return rc.type = "bundle";
    },
    "@": function (rc) {
      return rc.type = "file";
    },
    "#": function (rc) {
      return rc.type = "text";
    },
    "$": function (rc) {
      return rc.type = "module";
    },
    "~": function (rc) {
      return rc.isMatchSrcFilename = true;
    },
    "|": function (rc) {
      return rc.isTerminal = true;
    },
    "+": function (rc) {
      return rc.runAt = "beforeTemplate";
    },
    "!": function (rc) {
      return rc.runAt = "afterTemplate";
    },
    "%": function (rc) {
      return rc.runAt = "afterOptimize";
    },
    ">": function (rc) {
      return rc.runAt = "afterSave";
    }
  };
  nameFlags = _.keys(nameFlagsActions);
  return ResourceConverter;
}();
module.exports = ResourceConverter;

;