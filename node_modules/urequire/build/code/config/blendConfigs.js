// Generated by uRequire v0.7.0-beta.23 target: 'lib' template: 'nodejs'

var _ = require('lodash'),
    _B = require('uberscore'),
    UError = require('../utils/UError');

var l = new _B.Logger('uRequire/config/blendConfigs');

var MasterDefaultsConfig, ResourceConverter, _blendDerivedConfigs, _optimizers, addIgnoreToFilezAsExclude, addedCfgs, arrayizeBlender, arrayizeUniquePusher, arrayizeUniqueReversingUnshifter, blendConfigs, bundleBuildBlender, deepCloneBlender, defaultDeriveLoader, dependenciesBindingsBlender, depracatedKeysBlender, fs, inArrayWithEquals, moveKeysBlender, renameKeys, shimBlender, templateBlender, upath, watchBlender, indexOf = [].indexOf || function (item) {
    for (var i = 0, l = this.length; i < l; i++) {
      if (i in this && this[i] === item)
        return i;
    }
    return -1;
  };
fs = require("fs");
upath = require("upath");
require("butter-require")();
MasterDefaultsConfig = require("./MasterDefaultsConfig");
ResourceConverter = require("./ResourceConverter");
arrayizeUniqueReversingUnshifter = new _B.ArrayizeBlender([], {
  unique: true,
  reverse: true,
  addMethod: "unshift"
});
arrayizeUniquePusher = new _B.ArrayizeBlender([], { unique: true });
arrayizeBlender = new _B.ArrayizeBlender();
moveKeysBlender = new _B.Blender([{
    order: ["path"],
    "*": {
      "|": function (partsKeys) {
        return function (prop, src, dst) {
          var confPart, i, len, ref;
          ref = _.keys(partsKeys);
          for (i = 0, len = ref.length; i < len; i++) {
            confPart = ref[i];
            if (indexOf.call(partsKeys[confPart], prop) >= 0) {
              _B.setp(this.dstRoot, "/" + confPart + "/" + prop, src[prop], { overwrite: true });
              break;
            }
          }
          return this.SKIP;
        };
      }({
        bundle: _.keys(MasterDefaultsConfig.bundle),
        build: _.keys(MasterDefaultsConfig.build)
      })
    },
    bundle: {
      "|": function () {
        return _B.Blender.NEXT;
      }
    },
    build: {
      "|": function () {
        return _B.Blender.NEXT;
      }
    }
  }]);
renameKeys = {
  $: {
    bundle: {
      bundlePath: "path",
      bundleName: "name",
      copyNonResources: "copy",
      filespecs: "filez",
      dependencies: {
        noWeb: "node",
        bundleExports: "imports",
        exports: {
          bundle: "../imports",
          root: "../rootExports"
        },
        variableNames: "depsVars",
        _knownVariableNames: "_knownDepsVars"
      }
    },
    build: {
      outputPath: "dstPath",
      done: "afterBuild",
      exportsRoot: "rootExports/runtimes",
      noRootExports: "rootExports/ignore"
    }
  }
};
_.extend(renameKeys.$, renameKeys.$.bundle);
_.extend(renameKeys.$, renameKeys.$.build);
depracatedKeysBlender = new _B.DeepDefaultsBlender([{
    order: ["src"],
    "*": function (prop, src, dst) {
      var renameTo, renameToPath;
      renameTo = _B.getp(renameKeys, this.path);
      if (_.isString(renameTo)) {
        renameToPath = upath.normalizeSafe(upath.join(this.path.slice(1, -1).join("/"), renameTo));
        l.warn("DEPRACATED config path found '" + this.path.slice(1).join("/") + "' - rename to '" + renameToPath + "'");
        _B.setp(this.dstRoot, renameToPath, src[prop], {
          overwrite: true,
          separator: "/"
        });
        return this.SKIP;
      }
      return this.NEXT;
    }
  }]);
addIgnoreToFilezAsExclude = function (cfg) {
  var filez, i, ignore, ignoreSpec, len, ref, ref1;
  ignore = _B.arrayize(((ref = cfg.bundle) != null ? ref.ignore : void 0) || cfg.ignore);
  if (!_.isEmpty(ignore)) {
    l.warn("DEPRACATED key 'ignore' found @ config - adding them as exclude '!' to 'bundle.filez'");
    filez = _B.arrayize(((ref1 = cfg.bundle) != null ? ref1.filez : void 0) || cfg.filez || ["**/*"]);
    for (i = 0, len = ignore.length; i < len; i++) {
      ignoreSpec = ignore[i];
      filez.push("!");
      filez.push(ignoreSpec);
    }
    delete cfg.ignore;
    delete cfg.bundle.ignore;
    _B.setp(cfg, [
      "bundle",
      "filez"
    ], filez, { overwrite: true });
  }
  return cfg;
};
_optimizers = MasterDefaultsConfig.build._optimizers;
bundleBuildBlender = new _B.DeepCloneBlender([{
    order: [
      "path",
      "src",
      "dst"
    ],
    arrayizeConcat: function (prop, src, dst) {
      if (_.isFunction(src[prop])) {
        return src[prop](_.clone(_B.arrayize(dst[prop])), dst, prop);
      } else {
        return arrayizeBlender.blend(dst[prop], _.clone(src[prop]));
      }
    },
    arraysConcatOrOverwrite: function (prop, src, dst) {
      if (_.isFunction(src[prop])) {
        return src[prop](_.clone(_B.arrayize(dst[prop])), dst, prop);
      } else {
        if (_.isArray(dst[prop]) && _.isArray(src[prop])) {
          return arrayizeBlender.blend(_.clone(dst[prop]), src[prop]);
        } else {
          return src[prop];
        }
      }
    },
    dependenciesBindings: function (prop, src, dst) {
      return dependenciesBindingsBlender.blend(dst[prop], src[prop]);
    },
    bundle: {
      filez: { "|": { "*": "arrayizeConcat" } },
      copy: { "|": { "*": "arrayizeConcat" } },
      resources: { "|": { "*": "arrayizeConcat" } },
      dependencies: {
        node: { "|": { "*": "arrayizeConcat" } },
        imports: { "|": { "*": "dependenciesBindings" } },
        rootExports: { "|": { "*": "dependenciesBindings" } },
        replace: { "|": { "*": "dependenciesBindings" } },
        locals: { "|": { "*": "dependenciesBindings" } },
        depsVars: { "|": { "*": "dependenciesBindings" } },
        _knownDepsVars: { "|": { "*": "dependenciesBindings" } },
        paths: { override: { "|": { "*": "dependenciesBindings" } } }
      }
    },
    build: {
      useStrict: { "|": "arraysConcatOrOverwrite" },
      bare: { "|": "arraysConcatOrOverwrite" },
      globalWindow: { "|": "arraysConcatOrOverwrite" },
      runtimeInfo: { "|": "arraysConcatOrOverwrite" },
      allNodeRequires: { "|": "arraysConcatOrOverwrite" },
      dummyParams: { "|": "arraysConcatOrOverwrite" },
      injectExportsModule: { "|": "arraysConcatOrOverwrite" },
      scanAllow: { "|": "arraysConcatOrOverwrite" },
      noLoaderUMD: { "|": "arraysConcatOrOverwrite" },
      warnNoLoaderUMD: { "|": "arraysConcatOrOverwrite" },
      deleteErrored: { "|": "arraysConcatOrOverwrite" },
      rootExports: {
        runtimes: { "|": "overwrite" },
        ignore: { "|": "arraysConcatOrOverwrite" },
        noConflict: { "|": "arraysConcatOrOverwrite" }
      },
      watch: {
        "|": function (prop, src, dst) {
          return watchBlender.blend(dst[prop], src[prop]);
        }
      },
      template: {
        "|": {
          "*": function (prop, src, dst) {
            return templateBlender.blend(dst[prop], src[prop]);
          }
        }
      },
      debugLevel: {
        "|": {
          "*": function (prop, src) {
            var dl;
            dl = src[prop] * 1;
            if (_.isNumber(dl) && !_.isNaN(dl)) {
              return dl;
            } else {
              l.warn("Not a Number debugLevel: ", src[prop], " - defaulting to 1.");
              return 1;
            }
          }
        }
      },
      afterBuild: {
        "|": function (prop, src, dst) {
          return arrayizeBlender.blend(dst[prop], src[prop]);
        }
      },
      optimize: {
        "|": {
          Boolean: function (prop, src, dst) {
            if (src[prop]) {
              return _optimizers[0];
            }
          },
          String: function (prop, src, dst) {
            var optimizer;
            if (!(optimizer = _.find(_optimizers, function (v) {
                return v === src[prop];
              }))) {
              l.er("Unknown optimize '" + src[prop] + "' - using 'uglify2' as default");
              return _optimizers[0];
            } else {
              return optimizer;
            }
          },
          "{}": function (prop, src, dst) {
            var optimizer;
            if (!(optimizer = _.find(_optimizers, function (v) {
                return indexOf.call(_.keys(src[prop]), v) >= 0;
              }))) {
              l.warn("Unknown optimize object", src[prop], " - using 'uglify2' as default");
              return _optimizers[0];
            } else {
              dst[optimizer] = src[prop][optimizer];
              return optimizer;
            }
          }
        }
      },
      rjs: {
        shim: {
          "|": function (prop, src, dst) {
            return shimBlender.blend(dst[prop], src[prop]);
          }
        }
      }
    }
  }]);
shimBlender = new _B.DeepCloneBlender([{
    order: ["src"],
    "{}": function (prop, src, dst) {
      var depsArray, mod, modShim, ref;
      if (!_B.isHash(dst[prop])) {
        dst[prop] = {};
      }
      ref = src[prop];
      for (mod in ref) {
        modShim = ref[mod];
        depsArray = _.isArray(modShim) ? modShim : modShim.deps;
        if (dst[prop][mod]) {
          depsArray = arrayizeUniquePusher.blend([], depsArray, dst[prop][mod].deps);
        } else {
          dst[prop][mod] = {};
        }
        if (_B.isHash(modShim)) {
          _.extend(dst[prop][mod], modShim);
        }
        dst[prop][mod].deps = depsArray;
      }
      return this.SKIP;
    },
    "Undefined": function () {
      return this.SKIP;
    },
    "Boolean": function () {
      return this.SKIP;
    },
    "*": function (prop, src) {
      throw new UError("Unknown shim: `" + l.prettify(src[prop]) + "`.");
    }
  }]);
watchBlender = new _B.DeepCloneBlender([{
    order: [
      "path",
      "src"
    ],
    arrayizeUniquePusherSplitStrings: function (prop, src, dst) {
      var srcVal;
      srcVal = _.isString(src[prop]) ? src[prop].split(/\s/).filter(function (t) {
        return !!t;
      }) : src[prop];
      return arrayizeUniquePusher.blend([], dst[prop], srcVal);
    },
    after: { "|": { "*": "arrayizeUniquePusherSplitStrings" } },
    before: { "|": { "*": "arrayizeUniquePusherSplitStrings" } },
    files: {
      "|": {
        "*": function (prop, src, dst) {
          return arrayizeUniquePusher.blend(dst[prop], src[prop]);
        }
      }
    },
    "|": {
      String: function (prop, src, dst) {
        var num, w;
        num = parseInt(src[prop]);
        w = !_.isNaN(num) ? {
          debounceDelay: num,
          enabled: true
        } : {
          info: src[prop],
          enabled: true
        };
        return deepCloneBlender.blend(dst[prop], w);
      },
      Number: function (prop, src, dst) {
        return deepCloneBlender.blend(dst[prop], {
          enabled: true,
          debounceDelay: src[prop]
        });
      },
      Boolean: function (prop, src, dst) {
        return deepCloneBlender.blend(dst[prop], { enabled: src[prop] });
      },
      "{}": function (prop, src, dst) {
        return watchBlender.blend({}, dst[prop], { enabled: true }, src[prop]);
      },
      "*": function (prop, src) {
        throw new UError("Invalid watch value " + l.prettify(src[prop]));
      },
      "Undefined": function () {
        return this.SKIP;
      }
    }
  }]);
dependenciesBindingsBlender = new _B.DeepCloneBlender([{
    order: ["src"],
    "String": function (prop, src, dst) {
      var base, name;
      dst[prop] || (dst[prop] = {});
      (base = dst[prop])[name = src[prop]] || (base[name] = []);
      return dst[prop];
    },
    "[]": function (prop, src, dst) {
      var dep, i, len, ref;
      if (!_B.isHash(dst[prop])) {
        dst[prop] = {};
      } else {
        dst[prop] = _B.mutate(_.clone(dst[prop], true), _B.arrayize);
      }
      ref = src[prop];
      for (i = 0, len = ref.length; i < len; i++) {
        dep = ref[i];
        dst[prop][dep] = _B.arrayize(dst[prop][dep]);
      }
      return dst[prop];
    },
    "{}": function (prop, src, dst) {
      var dep, depVars, ref;
      if (!_B.isHash(dst[prop])) {
        dst[prop] = {};
      } else {
        dst[prop] = _B.mutate(_.clone(dst[prop], true), _B.arrayize);
      }
      ref = src[prop];
      for (dep in ref) {
        depVars = ref[dep];
        dst[prop][dep] = arrayizeUniqueReversingUnshifter.blend(dst[prop][dep], depVars);
      }
      return dst[prop];
    },
    "->": function (prop, src, dst) {
      if (!_B.isHash(dst[prop])) {
        dst[prop] = {};
      } else {
        dst[prop] = _B.mutate(_.clone(dst[prop], true), _B.arrayize);
      }
      return src[prop](dst[prop], dst, prop);
    },
    "*": function () {
      return _B.Blender.SKIP;
    }
  }]);
deepCloneBlender = new _B.DeepCloneBlender();
templateBlender = new _B.DeepCloneBlender([{
    order: ["src"],
    "String": function (prop, src, dst) {
      return deepCloneBlender.blend(dst[prop], { name: src[prop] });
    },
    "{}": function (prop, src, dst) {
      return deepCloneBlender.blend(dst[prop], src[prop]);
    }
  }]);
defaultDeriveLoader = function (derive) {
  var cfgObject, err, errMsg, error;
  if (_.isString(derive)) {
    l.debug(5, "Loading config file: '" + derive + "'");
    try {
      if (cfgObject = require(fs.realpathSync(derive))) {
        return cfgObject;
      }
    } catch (error) {
      err = error;
      l.er(errMsg = "Error loading configuration: Can't load '" + derive + "'.", err);
      throw new UError(errMsg, { nested: err });
    }
  } else {
    if (_.isObject(derive)) {
      return derive;
    }
  }
};
addedCfgs = null;
inArrayWithEquals = function (item, array) {
  var arItem, i, len;
  for (i = 0, len = array.length; i < len; i++) {
    arItem = array[i];
    if (_.isEqual(item, arItem)) {
      return true;
    }
  }
  return false;
};
blendConfigs = function (configsArray, deriveLoader, withMaster) {
  var finalCfg, i, idx, len, rc, ref, ref1, resourceConverter, resources;
  if (withMaster == null) {
    withMaster = false;
  }
  if (withMaster) {
    configsArray.push(MasterDefaultsConfig);
  }
  if (!_.isFunction(deriveLoader)) {
    deriveLoader = defaultDeriveLoader;
  }
  addedCfgs = [];
  _blendDerivedConfigs(finalCfg = {}, configsArray, deriveLoader);
  if (!_.isEmpty((ref = finalCfg.bundle) != null ? ref.resources : void 0)) {
    resources = [];
    ref1 = finalCfg.bundle.resources;
    for (idx = i = 0, len = ref1.length; i < len; idx = ++i) {
      resourceConverter = ref1[idx];
      if (!_.isEmpty(rc = ResourceConverter.searchRegisterUpdate(resourceConverter))) {
        resources.push(rc);
      }
    }
    finalCfg.bundle.resources = _(resources).reverse().unique().reverse().value();
  }
  return finalCfg;
};
_blendDerivedConfigs = function (cfgDest, cfgsArray, deriveLoader) {
  var cfg, derivedObjects, drv, i;
  for (i = cfgsArray.length - 1; i >= 0; i += -1) {
    cfg = cfgsArray[i];
    if (!(cfg && !inArrayWithEquals(cfg, addedCfgs))) {
      continue;
    }
    addedCfgs.push(cfg);
    derivedObjects = function () {
      var j, len, ref, results;
      ref = _B.arrayize(cfg.derive);
      results = [];
      for (j = 0, len = ref.length; j < len; j++) {
        drv = ref[j];
        if (drv) {
          results.push(deriveLoader(drv));
        }
      }
      return results;
    }();
    if (!_.isEmpty(derivedObjects)) {
      _blendDerivedConfigs(cfgDest, _.flatten(derivedObjects), deriveLoader);
    }
    bundleBuildBlender.blend(cfgDest, moveKeysBlender.blend(addIgnoreToFilezAsExclude(depracatedKeysBlender.blend(cfg))));
  }
  return null;
};
_.extend(blendConfigs, {
  moveKeysBlender: moveKeysBlender,
  depracatedKeysBlender: depracatedKeysBlender,
  bundleBuildBlender: bundleBuildBlender,
  dependenciesBindingsBlender: dependenciesBindingsBlender,
  templateBlender: templateBlender,
  shimBlender: shimBlender,
  watchBlender: watchBlender
});
module.exports = blendConfigs;

;