// Generated by uRequire v0.7.0-beta.23 target: 'lib' template: 'nodejs'

var _ = require('lodash'),
    _B = require('uberscore'),
    UError = require('../utils/UError');

var l = new _B.Logger('uRequire/templates/AlmondOptimizationTemplate');

var AlmondOptimizationTemplate, Dependency, Template, upath, varSelector, extend = function (child, parent) {
    for (var key in parent) {
      if (hasProp.call(parent, key))
        child[key] = parent[key];
    }
    function ctor() {
      this.constructor = child;
    }
    ctor.prototype = parent.prototype;
    child.prototype = new ctor();
    child.__super__ = parent.prototype;
    return child;
  }, hasProp = {}.hasOwnProperty;
upath = require("upath");
Dependency = require("../fileResources/Dependency");
Template = require("./Template");
varSelector = function (vars, finale) {
  var v;
  if (finale == null) {
    finale = "void 0";
  }
  return function () {
    var i, len, results;
    results = [];
    for (i = 0, len = vars.length; i < len; i++) {
      v = vars[i];
      results.push("(typeof " + v + " !== 'undefined') ? " + v + " : ");
    }
    return results;
  }().join(" ") + finale;
};
module.exports = AlmondOptimizationTemplate = function (superClass) {
  extend(AlmondOptimizationTemplate, superClass);
  AlmondOptimizationTemplate.prototype.scope = "bundle";
  function AlmondOptimizationTemplate(bundle) {
    var aVar, dep, i, len, ref, vars;
    this.bundle = bundle;
    AlmondOptimizationTemplate.__super__.constructor.apply(this, arguments);
    this.local_nonNode_deps = [];
    this.local_nonNode_args = [];
    this.local_nonNode_params = [];
    ref = this.bundle.local_nonNode_depsVars;
    for (dep in ref) {
      vars = ref[dep];
      for (i = 0, len = vars.length; i < len; i++) {
        aVar = vars[i];
        this.local_nonNode_params.push(varSelector(vars, "__throwMissing('" + dep + "', '" + vars.join(", ") + "')"));
        this.local_nonNode_deps.push(dep);
        this.local_nonNode_args.push(aVar);
      }
    }
  }
  Object.defineProperties(AlmondOptimizationTemplate.prototype, {
    build: {
      get: function () {
        return this.bundle.build;
      }
    },
    imports_bundle_depsLoader: {
      get: function () {
        var dep, vars;
        return function () {
          var ref, results;
          ref = this.bundle.imports_bundle_depsVars;
          results = [];
          for (dep in ref) {
            vars = ref[dep];
            results.push("    var " + (vars.length === 1 ? vars[0] : vars.join(", ") + "; " + vars.join(" = ")) + (" = require('" + dep + "');"));
          }
          return results;
        }.call(this).join("\n");
      }
    },
    moduleNamePrint: {
      get: function () {
        var ref;
        if ((ref = this.build.template) != null ? ref.moduleName : void 0) {
          return "'" + this.build.template.moduleName + "', ";
        } else {
          return "";
        }
      }
    },
    bundleFactoryRegistar: {
      get: function () {
        return "if (__isAMD) {\n  return define(" + this.moduleNamePrint + (this.local_nonNode_deps.length ? "['" + this.local_nonNode_deps.join("', '") + "'], " : "") + "bundleFactory);\n} else {\n    if (__isNode) {\n        return module.exports = bundleFactory(" + (this.local_nonNode_deps.length ? "require('" + this.local_nonNode_deps.join("'), require('") + "')" : "") + ");\n    } else {\n        return bundleFactory(" + this.local_nonNode_params.join(", ") + ");\n    }\n}";
      }
    },
    wrap: {
      get: function () {
        var k, mod;
        return {
          start: "(function (global, window){\n  " + (_B.isTrue(this.build.useStrict) ? "'use strict';\n" : "") + this.sp("runtimeInfo") + "\n\n  var __nodeRequire = (__isNode ? require : function(dep){\n        throw new Error(\"uRequire: combined template '" + this.build.target + "', trying to load `node` dep `\" + dep + \"` in non-nodejs runtime (browser).\")\n      }),\n      __throwMissing = function(dep, vars) {\n        throw new Error(\"uRequire: combined template '" + this.build.target + "', detected missing dependency `\" + dep + \"` - all it's known binding variables `\" + vars + \"` were undefined\")\n      },\n      __throwExcluded = function(dep, descr) {\n        throw new Error(\"uRequire: combined template '" + this.build.target + "', trying to access unbound / excluded `\" + descr + \"` dependency `\" + dep + \"` on browser\");\n      };\n" + this.sp("bundle.mergedPreDefineIIFECode") + this.deb(30, "*** START *** bundleFactory, containing all modules (as AMD) & almond's `require`/`define`") + ("var bundleFactory = function(" + this.local_nonNode_args.join(", ") + ") {\n"),
          end: this.sp([
            "imports_bundle_depsLoader",
            "`template:combined` loads `dependencies.imports` with `dep.isBundle` )"
          ], [
            "bundle.commonCode",
            "added after `dependencies.imports` deps are loaded`"
          ], [
            "bundle.mergedCode",
            "`mergedCode` code from all modules is merged and added after `bundle.commonCode`"
          ]) + (this.bundle.main ? this.deb(30, "require and return `bundle.main` from `bundleFactory()`, kicking off the bundle.") + ("    return require('" + this.bundle.main + "');\n") : this.deb(30, "require all `bundle.modules` from `bundleFactory()`, since `bundle.main` is missing.") + function () {
            var ref, results;
            ref = this.bundle.modules;
            results = [];
            for (k in ref) {
              mod = ref[k];
              results.push("\nrequire('" + upath.trimExt(mod.dstFilename) + "');");
            }
            return results;
          }.call(this).join("")) + "\n};" + this.deb(30, "*** END *** bundleFactory: all modules (as AMD), common code & almond's `require`/`define`") + this.sp("bundleFactoryRegistar") + this.deb(20, "IIFE call of bundle enclosure, with @globalSelector i.e `global === window` always available") + ("}).call(this, " + this.globalSelector + ",\n              " + this.globalSelector + ")")
        };
      }
    },
    paths: {
      get: function () {
        var _paths, excludedDep, i, len, localDep, ref;
        _paths = {};
        ref = this.local_nonNode_deps;
        for (i = 0, len = ref.length; i < len; i++) {
          localDep = ref[i];
          _paths[localDep] = "getLocal_" + _.slugify(localDep);
        }
        for (excludedDep in this.bundle.local_node_depsVars) {
          _paths[excludedDep] = "getExcluded_" + _.slugify(excludedDep);
        }
        return _paths;
      }
    },
    dependencyFiles: {
      get: function () {
        var _dependencyFiles, dep, excludedDep, ref, vars;
        _dependencyFiles = {};
        l.deb(70, "creating dependencyFiles 'getLocal_XXX' from @local_nonNode_depsVars = \n", this.local_nonNode_depsVars);
        ref = this.bundle.local_nonNode_depsVars;
        for (dep in ref) {
          vars = ref[dep];
          l.deb(80, "creating 'getLocal_" + _.slugify(dep) + "' by grabDependencyVarOrRequireIt(dep = '", dep, "', aVars = ", vars, ")");
          _dependencyFiles["getLocal_" + _.slugify(dep)] = this.grabDependencyVarOrRequireIt(dep, vars, "local");
        }
        l.deb(70, "creating dependencyFiles for @bundle.local_node_depsVars = ", this.bundle.local_node_depsVars);
        for (excludedDep in this.bundle.local_node_depsVars) {
          l.deb(80, "creating 'getExcluded_" + _.slugify(excludedDep) + "' by grabDependencyVarOrRequireIt(dep=", excludedDep, ", aVars = always empty array!)");
          _dependencyFiles["getExcluded_" + _.slugify(excludedDep)] = this.grabDependencyVarOrRequireIt(excludedDep, [], "node-only & local");
        }
        return _dependencyFiles;
      }
    }
  });
  AlmondOptimizationTemplate.prototype.grabDependencyVarOrRequireIt = function (dep, vars, descr) {
    var depFactory;
    depFactory = this.deb(50, "define factory (mock) for `" + descr + "` '" + dep + "' called.") + "if (__isNode) {" + this.deb(50, "loading '" + dep + "' with node's `require('" + dep + "')`") + ("\n  return __nodeRequire('" + dep + "');\n} else {\n") + this.deb(50, "loading '" + dep + "' through 1st non-undefined binded var among `" + vars.join(", ") + "`, that should be available on closure or global (eg window)") + (_.isEmpty(vars) ? "    __throwExcluded('" + dep + "', '" + descr + "');" : "    return " + varSelector(vars, "__throwMissing('" + dep + "', '" + vars.join(", ") + "')")) + "\n}";
    return "define(" + this.__function(depFactory) + ");";
  };
  return AlmondOptimizationTemplate;
}(Template);

;