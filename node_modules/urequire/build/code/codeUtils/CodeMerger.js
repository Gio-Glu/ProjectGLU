// Generated by uRequire v0.7.0-beta.23 target: 'lib' template: 'nodejs'

var _ = require('lodash'),
    _B = require('uberscore'),
    UError = require('../utils/UError');

var l = new _B.Logger('uRequire/codeUtils/CodeMerger');

var CodeMerger, dfb, isEqualCode, isLikeCode, toAST, toCode;
toCode = require("./toCode");
toAST = require("./toAST");
isLikeCode = require("./isLikeCode");
isEqualCode = require("./isEqualCode");
dfb = new _B.DeepDefaultsBlender();
CodeMerger = function () {
  CodeMerger.options = { uniqueDeclarations: true };
  function CodeMerger(options) {
    this.options = options != null ? options : CodeMerger.options;
    if (this.options !== CodeMerger.options) {
      dfb.blend(this.options, CodeMerger.options);
    }
    this.declarations || (this.declarations = []);
    this.statements || (this.statements = []);
  }
  CodeMerger.prototype.reset = function () {
    this.declarations = [];
    return this.statements = [];
  };
  CodeMerger.prototype.addbodyNode = function (node) {
    var decl, dublicateDecl, i, len, ref;
    if (node.type === "VariableDeclaration") {
      ref = node.declarations;
      for (i = 0, len = ref.length; i < len; i++) {
        decl = ref[i];
        if (!_.any(this.declarations, function (fd) {
            return _.isEqual(decl, fd);
          })) {
          if (dublicateDecl = _.find(this.declarations, function (fd) {
              return isLikeCode({
                type: decl.type,
                id: decl.id
              }, fd);
            })) {
            if (this.options.uniqueDeclarations) {
              throw new UError("Duplicate var declaration while merging code:\n\n" + toCode(decl) + "\n\nis a duplicate of\n\n" + toCode(dublicateDecl));
            } else {
              l.debug(90, "Replacing declaration of '" + decl.id.name + "'");
              dublicateDecl.init = decl.init;
            }
          } else {
            l.debug(90, "Adding declaration of '" + decl.id.name + "'");
            this.declarations.push(decl);
          }
        }
      }
    } else {
      if (!_.any(this.statements, function (fd) {
          return _.isEqual(node, fd);
        })) {
        this.statements.push(node);
      }
    }
    return null;
  };
  CodeMerger.prototype.add = function (code) {
    var i, len, node, ref, ref1, results;
    if (!_.isEmpty(code)) {
      ref1 = ((ref = toAST(code, "Program")) != null ? ref.body : void 0) || [];
      results = [];
      for (i = 0, len = ref1.length; i < len; i++) {
        node = ref1[i];
        results.push(this.addbodyNode(node));
      }
      return results;
    }
  };
  Object.defineProperties(CodeMerger.prototype, {
    "AST": {
      get: function () {
        if (_.isEmpty(this.declarations)) {
          return this.statements;
        } else {
          return [{
              type: "VariableDeclaration",
              declarations: this.declarations,
              kind: "var"
            }].concat(this.statements);
        }
      }
    },
    "code": {
      get: function () {
        return toCode(this.AST);
      }
    }
  });
  return CodeMerger;
}();
module.exports = CodeMerger;

;