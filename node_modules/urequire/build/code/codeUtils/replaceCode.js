// Generated by uRequire v0.7.0-beta.23 target: 'lib' template: 'nodejs'

var _ = require('lodash'),
    _B = require('uberscore'),
    UError = require('../utils/UError');

var l = new _B.Logger('uRequire/codeUtils/replaceCode');

var isEqualCode, isLikeCode, replaceCode, toAST, toCode;
toCode = require("./toCode");
toAST = require("./toAST");
isLikeCode = require("./isLikeCode");
isEqualCode = require("./isEqualCode");
replaceCode = function (AST, matchCode, replCode) {
  var deletion, deletions, i, ref, ref1, ref2, ref3, replCodeAction;
  matchCode = (ref = toAST(matchCode, "Program")) != null ? (ref1 = ref.body) != null ? ref1[0] : void 0 : void 0;
  replCode = (ref2 = toAST(replCode, "Program")) != null ? (ref3 = ref2.body) != null ? ref3[0] : void 0 : void 0;
  deletions = [];
  replCodeAction = function (prop, src) {
    var _replCode, ref4, ref5;
    if (_B.isLike(matchCode, src[prop])) {
      _replCode = _.isFunction(replCode) ? (ref4 = toAST(replCode(src[prop]), "Program")) != null ? (ref5 = ref4.body) != null ? ref5[0] : void 0 : void 0 : replCode;
      if (_replCode) {
        if (l.deb(50)) {
          l.debug("Replacing code:\n```````````````````\n" + toCode(src[prop]) + "\n```` with code: ```\n" + toCode(_replCode) + "\n```````````````````");
        }
        return src[prop] = _replCode;
      } else {
        if (_.isArray(src)) {
          if (l.deb(50)) {
            l.debug("Deleting code:\n  `" + toCode(src[prop]) + "`");
          }
          deletions.push({
            src: src,
            prop: prop
          });
        } else {
          if (l.deb(50)) {
            l.debug("Delete code (replacing with EmptyStatement):\n`" + toCode(src[prop]) + "`");
          }
          src[prop] = { type: "EmptyStatement" };
        }
        return false;
      }
    }
  };
  _B.traverse(AST, replCodeAction);
  for (i = deletions.length - 1; i >= 0; i += -1) {
    deletion = deletions[i];
    deletion.src.splice(deletion.prop, 1);
  }
  return this;
};
module.exports = replaceCode;

;