// Generated by uRequire v0.7.0-beta.23 target: 'lib' template: 'nodejs'

var _ = require('lodash'),
    _B = require('uberscore'),
    UError = require('../utils/UError');

var l = new _B.Logger('uRequire/codeUtils/toAST');

var esprima, toAST, indexOf = [].indexOf || function (item) {
    for (var i = 0, l = this.length; i < l; i++) {
      if (i in this && this[i] === item)
        return i;
    }
    return -1;
  };
esprima = require("esprima");
module.exports = toAST = function (codeOrAST, type) {
  var err, error, ref, validTypes;
  validTypes = [
    "Program",
    "BlockStatement"
  ];
  if (type && indexOf.call(validTypes, type) < 0) {
    throw new UError("Invalid `toAST()` type - validTypes are ['" + validTypes.join(", ") + "'].");
  }
  if (_.isString(codeOrAST)) {
    try {
      codeOrAST = esprima.parse(codeOrAST);
    } catch (error) {
      err = error;
      if (l.deb(90)) {
        throw new UError("*esprima.parse* in toAST while parsing javascript fragment: \n " + codeOrAST + ".", { nested: err });
      } else {
        throw err;
      }
    }
  }
  if (_.isArray(codeOrAST)) {
    return {
      type: type || "Program",
      body: codeOrAST
    };
  } else {
    if (_.isObject(codeOrAST)) {
      if (!type) {
        return codeOrAST;
      } else {
        if (ref = codeOrAST.type, indexOf.call(validTypes, ref) >= 0) {
          codeOrAST.type = type;
          return codeOrAST;
        } else {
          return {
            type: type,
            body: [codeOrAST]
          };
        }
      }
    } else {
      return codeOrAST;
    }
  }
};

;