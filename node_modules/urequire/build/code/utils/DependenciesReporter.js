// Generated by uRequire v0.7.0-beta.23 target: 'lib' template: 'nodejs'

var _ = require('lodash'),
    _B = require('uberscore'),
    UError = require('./UError');

var l = new _B.Logger('uRequire/utils/DependenciesReporter');

var DependenciesReporter, Dependency, indexOf = [].indexOf || function (item) {
    for (var i = 0, l = this.length; i < l; i++) {
      if (i in this && this[i] === item)
        return i;
    }
    return -1;
  };
Dependency = require("../fileResources/Dependency");
DependenciesReporter = function () {
  var dependencyTypesMessages;
  function DependenciesReporter() {
    this.reportData = {};
  }
  dependencyTypesMessages = {
    "untrusted": {
      color: "[35;1m",
      header: "Untrusted dependencies (i.e non literal String) found:",
      footer: "They are left AS-IS, BUT are added to the dependency array.\nIf evaluated name of the `require( utrustedDep )` isnt in dependency array [..],\nyour app WILL HALT and WILL NOT WORK on the web/AMD side (but should be OK on node)."
    },
    "node": {
      color: "[35;1m",
      header: "Node-only *bundle dependencies*, NOT added to AMD deps array:",
      footer: "Make sure they are not `require`d when running on Web,\n(i.e use separate execution branches with `__isNode` / `__isWeb` using `runtimeInfo:true`),\notherwise you code will halt on Web."
    },
    "nodeLocal": {
      color: "[34;1m",
      header: "Node-only *local dependencies*, NOT added to AMD deps array:",
      footer: "Make sure they are not `require`d when running on Web,\n(i.e use separate execution branches with `__isNode` / `__isWeb` using `runtimeInfo:true`),\notherwise you code will halt on Web."
    },
    "local": {
      color: "[33;1m",
      header: "`local` deps (i.those either looking 'localdep' / declared in deps.locals / found in bower.json or package.json) and *not* part of bundle :",
      footer: "Note, when executing :\n* on nodejs, locals are `require`d as is.\n* on Web/AMD or uRequire/UMD they use `rjs.baseUrl` / `rjs.paths`.\n* on Web/Script they are loaded via <script src='path/to/localdep.js'/>."
    },
    "notFoundInBundle": {
      color: "[31;1m",
      header: "Bundle-looking dependencies not found in bundle:",
      footer: "They are added as-is, without path translation from *bundleRelative* to *fileRelative*.\nEven if they are later added to the `dstPath`, they will not load on nodejs cause\nnodejs expects `./` fileRelative paths.\n\nIf a dep is indeed a local dependency, eg `when/callbacks` you must either :\n   * Install it with either `bower install when` or `npm install when` (only the first path part)\n                                  OR\n   * Declare it as `dependencies: locals: ['when']` (only the first path part).\nand urequire will recognize it as a local (instead of missing)."
    },
    "external": {
      color: "[33m",
      header: "External dependencies (not checked in this version):",
      footer: "They are added as-is."
    },
    "webRootMap": {
      color: "[35m",
      header: "Web root dependencies '/' (not checked in this version):",
      footer: "They are added as-is."
    }
  };
  DependenciesReporter.prototype.reportTemplate = function (texts, depsFound) {
    var dep, maxDepLength, modules;
    maxDepLength = _.max(_.map(depsFound, function (v, k) {
      return k.length;
    }));
    return "\n   " + texts.color + texts.header + "[37;1m\n" + function () {
      var results;
      results = [];
      for (dep in depsFound) {
        modules = depsFound[dep];
        results.push("    - '" + dep + "'" + _.pad("(in " + modules.length + " modules: '", 18 + (maxDepLength - dep.length) + (modules.length + "").length) + modules.slice(0, 4).join("', '") + (modules.length > 4 ? "', ...)" : "')"));
      }
      return results;
    }().join("\n") + "\n   " + texts.color + texts.footer.split("\n").join("\n   ") + "[0m\n";
  };
  DependenciesReporter.prototype.addReportData = function (resolvedDeps, modyle) {
    var base, base1, depType, foundModules, i, len, ref, resDep, resDeps;
    for (depType in resolvedDeps) {
      resDeps = resolvedDeps[depType];
      if (!!_.isEmpty(resDeps)) {
        continue;
      }
      (base = this.reportData)[depType] || (base[depType] = {});
      ref = _B.arrayize(resDeps);
      for (i = 0, len = ref.length; i < len; i++) {
        resDep = ref[i];
        foundModules = (base1 = this.reportData[depType])[resDep] || (base1[resDep] = []);
        if (indexOf.call(foundModules, modyle) < 0) {
          foundModules.push(modyle);
        }
      }
    }
    return null;
  };
  DependenciesReporter.prototype.getReport = function (interestingDepTypes) {
    var depType, depTypesMsgs, report;
    if (interestingDepTypes == null) {
      interestingDepTypes = _.keys(dependencyTypesMessages);
    }
    l.debug(95, "Getting report only for types :", interestingDepTypes);
    report = "";
    for (depType in dependencyTypesMessages) {
      depTypesMsgs = dependencyTypesMessages[depType];
      if (indexOf.call(interestingDepTypes, depType) >= 0) {
        if (this.reportData[depType]) {
          report += this.reportTemplate(depTypesMsgs, this.reportData[depType]);
        }
      }
    }
    return report;
  };
  return DependenciesReporter;
}();
module.exports = DependenciesReporter;

;