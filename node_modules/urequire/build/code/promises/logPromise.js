// Generated by uRequire v0.7.0-beta.23 target: 'lib' template: 'nodejs'

var _ = require('lodash'),
    _B = require('uberscore'),
    UError = require('../utils/UError');

var l = new _B.Logger('uRequire/promises/logPromise');

var slice = [].slice;
module.exports = function (l) {
  var logPromise;
  if (!(l instanceof _B.Logger)) {
    throw "not (l instanceof _B.Logger)";
  }
  return logPromise = function (promisingFn, fnName, resultName, rejectName) {
    if (fnName == null) {
      fnName = "not-named promising function";
    }
    if (resultName == null) {
      resultName = "result";
    }
    if (rejectName == null) {
      rejectName = "reject";
    }
    if (!_.isFunction(promisingFn)) {
      throw new Error("1st param must be a promise-returning function");
    }
    return function () {
      var args, argsClone;
      args = 1 <= arguments.length ? slice.call(arguments, 0) : [];
      (argsClone = _.clone(args)).unshift(fnName + " called with:\n");
      l.debug.apply(l, argsClone);
      return promisingFn.apply(this, args).then(function (res) {
        var head, resLog;
        head = fnName + " " + resultName + " is:\n";
        if (_.isArray(res)) {
          (resLog = _.clone(res)).unshift(head);
        } else {
          resLog = [
            head,
            res
          ];
        }
        l.debug.apply(l, resLog);
        return res;
      }, function (rej) {
        var head, rejLog;
        head = fnName + " " + rejectName + " is:\n";
        if (_.isArray(rej)) {
          (rejLog = _.clone(rej)).unshift(head);
        } else {
          rejLog = [
            head,
            rej
          ];
        }
        l.err.apply(l, rejLog);
        throw rej;
      });
    };
  };
};

;