/**
* urequire http://uRequire.org
*
* Convert AMD & commonjs modules to UMD, AMD, commonjs or `combined.js` (rjs & almond) & run/test on nodejs, Web/AMD or Web/Script. Manipulate & inject module code & dependencies while building & more
* Version 0.7.0-beta.25 - Compiled on 2016-01-24 23:51:03
* Repository git://github.com/anodynos/uRequire
* Copyright(c) 2016 Agelos Pikoulas <agelos.pikoulas@gmail.com>
* License MIT
*/

// Generated by uRequire v0.7.0-beta.23 target: 'lib' template: 'nodejs'

var _ = require('lodash'),
    _B = require('uberscore'),
    UError = require('./utils/UError');

var l = new _B.Logger('uRequire/urequire');
var VERSION = '0.7.0-beta.25'; // injected by urequire-rc-inject-version

var BBCreated, BBExecuted, When, b, blendConfigs, fs, i, len, ref;
exports.VERSION = typeof VERSION !== "undefined" && VERSION !== null ? VERSION : "{NO_VERSION}";
When = require("./promises/whenFull");
fs = require("fsp");
_.mixin(require("underscore.string").exports());
require("coffee-script/register");
Object.defineProperties(exports, {
  NodeRequirer: {
    get: function () {
      return require("./NodeRequirer");
    }
  },
  upath: {
    get: function () {
      return require("upath");
    }
  },
  umatch: {
    get: function () {
      return require("umatch");
    }
  },
  Bundle: {
    get: function () {
      return require("./process/Bundle");
    }
  },
  Build: {
    get: function () {
      return require("./process/Build");
    }
  },
  Module: {
    get: function () {
      return require("./fileResources/Module");
    }
  },
  BundleBuilder: {
    get: function () {
      return require("./process/BundleBuilder");
    }
  },
  BBExecuted: {
    get: function () {
      return BBExecuted;
    }
  },
  BBCreated: {
    get: function () {
      return BBCreated;
    }
  }
});
_.each([
  "CodeMerger",
  "isEqualCode",
  "isLikeCode",
  "replaceCode",
  "toAST",
  "toCode"
], function (codeUtil) {
  return Object.defineProperty(exports, codeUtil, {
    get: function () {
      return require("./codeUtils/" + codeUtil);
    }
  });
});
BBExecuted = [];
BBCreated = [];
_.extend(exports, {
  addBBCreated: function (bb) {
    if (bb.build.target && exports.findBBCreated(bb.build.target)) {
      throw new UError("Can't have two BundleBuilders with the same `target` '" + bb.build.target + "'");
    }
    return BBCreated.push(bb);
  },
  findBBCreated: function (target) {
    return _.find(BBCreated, function (bb) {
      return bb.build.target === target;
    });
  },
  addBBExecuted: function (bb) {
    _.pull(BBExecuted, bb);
    return BBExecuted.push(bb);
  },
  findBBExecutedLast: function (target) {
    if (_.isUndefined(target) || _.isNull(target)) {
      return _.last(BBExecuted);
    } else {
      if (_.isString(target)) {
        return _.findLast(BBExecuted, function (bb) {
          return bb.build.target === target;
        });
      } else {
        throw new Error("urequire: findBBExecutedLast() unknown parameter type `" + _B.type(target) + "`, target argument = " + target);
      }
    }
  },
  findBBExecutedBefore: function (bbOrTarget) {
    var li;
    if (_.isUndefined(bbOrTarget) || _.isNull(bbOrTarget)) {
      return _.last(BBExecuted);
    } else {
      if (_.isString(bbOrTarget)) {
        li = _.findLastIndex(BBExecuted, function (bb) {
          return bb.build.target === bbOrTarget;
        });
      } else {
        if (bbOrTarget instanceof require("./process/BundleBuilder")) {
          li = _.lastIndexOf(BBExecuted, bbOrTarget);
        } else {
          throw new Error("urequire: findBBExecutedBefore() unknown parameter type `" + _B.type(bbOrTarget) + "`, bbOrTarget argument = " + bbOrTarget);
        }
      }
      if (li >= 1) {
        return BBExecuted[li - 1];
      } else {
        return null;
      }
    }
  }
});
blendConfigs = exports.blendConfigs = require("./config/blendConfigs");
ref = [
  "dependenciesBindingsBlender",
  "templateBlender",
  "shimBlender",
  "watchBlender"
];
for (i = 0, len = ref.length; i < len; i++) {
  b = ref[i];
  exports[b] = blendConfigs[b];
}

;