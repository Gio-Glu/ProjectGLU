// Generated by uRequire v0.7.0-beta.23 target: 'lib' template: 'nodejs'

var _ = require('lodash'),
    _B = require('uberscore'),
    UError = require('../utils/UError');

var l = new _B.Logger('uRequire/process/BundleBase');

var BundleBase, Dependency, fs, pathRelative, upath, extend = function (child, parent) {
    for (var key in parent) {
      if (hasProp.call(parent, key))
        child[key] = parent[key];
    }
    function ctor() {
      this.constructor = child;
    }
    ctor.prototype = parent.prototype;
    child.prototype = new ctor();
    child.__super__ = parent.prototype;
    return child;
  }, hasProp = {}.hasOwnProperty;
fs = require("fs");
upath = require("upath");
pathRelative = require("../paths/pathRelative");
Dependency = require("../fileResources/Dependency");
BundleBase = function (superClass) {
  extend(BundleBase, superClass);
  function BundleBase() {
    return BundleBase.__super__.constructor.apply(this, arguments);
  }
  Object.defineProperties(BundleBase.prototype, {
    webRoot: {
      get: function () {
        return upath.normalize("" + (this.webRootMap[0] === "." ? this.path + "/" + this.webRootMap : this.webRootMap));
      }
    }
  });
  BundleBase.prototype.resolvePaths = function (dep, relativeTo) {
    var addit, depName, i, len, path, pathStart, paths, ref, resPaths;
    if (relativeTo == null) {
      relativeTo = this.dirname;
    }
    depName = dep.name({
      plugin: false,
      ext: true
    });
    resPaths = [];
    addit = function (path) {
      return resPaths.push(upath.normalize(path));
    };
    if (depName[0] === ".") {
      addit(relativeTo + "/" + depName);
    } else {
      if (dep.isWebRootMap) {
        addit(this.webRoot + depName);
      } else {
        pathStart = depName.split("/")[0];
        if ((ref = this.getRequireJSConfig().paths) != null ? ref[pathStart] : void 0) {
          paths = this.getRequireJSConfig().paths[pathStart];
          if (!_.isArray(paths)) {
            paths = [paths];
          }
          for (i = 0, len = paths.length; i < len; i++) {
            path = paths[i];
            addit(this.path + depName.replace(pathStart, path));
          }
        } else {
          if (depName.indexOf("/") >= 0) {
            addit(this.path + depName);
          } else {
            addit(depName);
            addit(this.path + depName);
          }
        }
      }
    }
    return resPaths;
  };
  return BundleBase;
}(_B.CalcCachedProperties);
module.exports = BundleBase;

;